using System;
using System.IO;
using System.IO.Compression;
using System.IO.Hashing;
using System.Security.Cryptography;
using System.Text;

namespace LibIRD
{
    /// <summary>
    /// IRD Generation, Reading and Writing
    /// </summary>
    public class IRD
    {
        #region Constants

        /// <summary>
        /// IRD file signature
        /// </summary>
        /// <remarks>"3IRD"</remarks>
        private static readonly byte[] Magic = new byte[] { 0x33, 0x49, 0x52, 0x44 };

        /// <summary>
        /// MD5 hash of null
        /// </summary>
        private static readonly byte[] NullMD5 = new byte[] { 0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04, 0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e };

        /// <summary>
        /// AES CBC Encryption Key for Data 1 (Disc Key)
        /// </summary>
        private static readonly byte[] D1AesKey = { 0x38, 0x0B, 0xCF, 0x0B, 0x53, 0x45, 0x5B, 0x3C, 0x78, 0x17, 0xAB, 0x4F, 0xA3, 0xBA, 0x90, 0xED };

        /// <summary>
        /// AES CBC Initial Value for Data 1 (Disc Key)
        /// </summary>
        private static readonly byte[] D1AesIV = { 0x69, 0x47, 0x47, 0x72, 0xAF, 0x6F, 0xDA, 0xB3, 0x42, 0x74, 0x3A, 0xEF, 0xAA, 0x18, 0x62, 0x87 };

        /// <summary>
        /// AES CBC Encryption Key for Data 2 (Disc ID)
        /// </summary>
        private static readonly byte[] D2AesKey = { 0x7C, 0xDD, 0x0E, 0x02, 0x07, 0x6E, 0xFE, 0x45, 0x99, 0xB1, 0xB8, 0x2C, 0x35, 0x99, 0x19, 0xB3 };

        /// <summary>
        /// AES CBC Initial Value for Data 2 (Disc ID)
        /// </summary>
        private static readonly byte[] D2AesIV = { 0x22, 0x26, 0x92, 0x8D, 0x44, 0x03, 0x2F, 0x43, 0x6A, 0xFD, 0x26, 0x7E, 0x74, 0x8B, 0x23, 0x93 };

        #endregion

        #region Publicly Settable Properties

        /// <summary>
        /// IRD Specification Version
        /// </summary>
        /// <remarks>1 byte, Versions 6-9 are currently supported</remarks>
        public byte Version
        {
            get => _version;
            set
            {
                if (value == 6 || value == 7 || value == 8 || value == 9)
                    _version = value;
            }
        }
        private byte _version = 9; // Default to latest IRD version = 9

        /// <summary>
        /// Unique Identifier
        /// </summary>
        /// <remarks>Redump-style IRDs use CRC32 hash of the ISO as the UID</remarks>
        public uint UID { get; set; } = 0x00000000; // Default to zeroed UID

        /// <summary>
        /// Extra Config, usually 0x0000
        /// </summary>
        public ushort ExtraConfig { get; set; } = 0x0000;

        /// <summary>
        /// Attachments, usually 0x0000
        /// </summary>
        public ushort Attachments { get; set; } = 0x0000;

        /// <summary>
        /// D1 key
        /// </summary>
        /// <remarks>16 bytes</remarks>
        public byte[] Data1Key { get; set; }

        /// <summary>
        /// D2 key
        /// </summary>
        /// <remarks>16 bytes</remarks>
        public byte[] Data2Key { get; set; }

        /// <summary>
        /// Uncompressed PIC data
        /// </summary>
        /// <remarks>115 bytes</remarks>
        public byte[] PIC { get; set; }

        #endregion

        #region Privately Settable Properties

        /// <summary>
        /// The same value stored in PARAM.SFO / TITLE_ID
        /// </summary>
        /// <remarks>9 bytes, ASCII, stored without dashes</remarks>
        public string TitleID { get; private set; }

        /// <summary>
        /// The same value stored in PARAM.SFO / TITLE
        /// </summary>
        /// <remarks>ASCII</remarks>
        public string Title { get; private set; }

        /// <summary>
        /// The same value stored in PARAM.SFO / PS3_SYSTEM_VER
        /// </summary>
        /// <remarks>4 bytes, ASCII, (e.g. "1.20", missing uses "0000"</remarks>
        public string SystemVersion { get; private set; }

        /// <summary>
        /// The same value stored in PARAM.SFO / VERSION
        /// </summary>
        /// <remarks>5 bytes, ASCII, e.g. "01.20"</remarks>
        public string GameVersion { get; private set; }

        /// <summary>
        /// The same value stored in PARAM.SFO / APP_VER
        /// </summary>
        /// <remarks>5 bytes, ASCII, e.g. "01.00"</remarks>
        public string AppVersion { get; private set; }

        /// <summary>
        /// Length of the gzip-compressed header data
        /// </summary>
        public uint HeaderLength { get; private set; }

        /// <summary>
        /// Gzip-compressed header data
        /// </summary>
        public byte[] Header { get; private set; }

        /// <summary>
        /// Length of the gzip-compressed footer data
        /// </summary>
        public uint FooterLength { get; private set; }

        /// <summary>
        /// Gzip-compressed footer data
        /// </summary>
        public byte[] Footer { get; private set; }

        /// <summary>
        /// Number of complete regions in the image
        /// </summary>
        public byte RegionCount { get; private set; }

        /// <summary>
        /// MD5 hashes for all complete regions in the image
        /// </summary>
        /// <remarks><see cref="RegionCount"/> regions, 16-bytes per hash</remarks>
        public byte[][] RegionHashes { get; private set; }

        /// <summary>
        /// Number of decrypted files in the image
        /// </summary>
        public uint FileCount { get; private set; }

        /// <summary>
        /// Starting sector for each decrypted file
        /// </summary>
        /// <remarks><see cref="FileCount"/> files, alternating with each <see cref="FileHashes"/> entry</remarks>
        public ulong[] FileKeys { get; private set; }

        /// <summary>
        /// MD5 hashes for all decrypted files in the image
        /// </summary>
        /// <remarks><see cref="FileHashes"/> files, 16-bytes per hash, alternating with each <see cref="FileHashes"/> entry</remarks>
        public byte[][] FileHashes { get; private set; }

        /// <summary>
        /// Gzipped IRD content 32-bit CRC "IEEE 802.3" hash, little endian
        /// </summary>
        public uint CRC { get; private set; }

        #endregion

        #region Generate Fields

        /// <summary>
        /// Generates Data 1, via AES-128 CBC decryption of a Disc Key
        /// </summary>
        /// <param name="key">Byte array containing AES encrypted Disc Key</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        private protected void GenerateD1(byte[] key)
        {
            // Validate key
            if (key == null || key.Length <= 0)
                throw new ArgumentNullException(nameof(key));
            if (key.Length != 16)
                throw new ArgumentException("Disc Key must be a byte array of length 16", nameof(key));

            // AES decryption
            using (Aes aes = Aes.Create())
            {
                // Validate aes is available
                if (aes == null)
                    throw new InvalidOperationException("AES not available. Change your system settings");

                // Set AES settings
                aes.Key = D1AesKey;
                aes.IV = D1AesIV;
                aes.Padding = PaddingMode.None;
                aes.Mode = CipherMode.CBC;

                // Perform AES decryption
                using (ICryptoTransform decryptor = aes.CreateDecryptor())
                {
                    MemoryStream ms = new MemoryStream();
                    CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Write);
                    cs.Write(key, 0, 16);
                    cs.FlushFinalBlock();
                    Data1Key = ms.ToArray();
                    ms.Close();
                    cs.Close();
                }
            }
        }

        /// <summary>
        /// Generates Data 2, via AES-128 CBC encryption of a Disc ID
        /// </summary>
        /// <param name="id">Byte array containing AES decrypted Disc ID</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        private protected void GenerateD2(byte[] id)
        {
            // Validate id
            if (id == null || id.Length <= 0)
                throw new ArgumentNullException(nameof(id));
            if (id.Length != 16)
                throw new ArgumentException("Disc ID must be a byte array of length 16", nameof(id));

            // AES encryption
            using (Aes aes = Aes.Create())
            {
                // Validate aes is available
                if (aes == null)
                    throw new InvalidOperationException("AES not available. Change your system settings");

                // Set AES settings
                aes.Key = D2AesKey;
                aes.IV = D2AesIV;
                aes.Padding = PaddingMode.None;
                aes.Mode = CipherMode.CBC;

                // Perform AES encryption
                using (ICryptoTransform encryptor = aes.CreateEncryptor())
                {
                    MemoryStream ms = new MemoryStream();
                    CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write);
                    cs.Write(id, 0, 16);
                    cs.FlushFinalBlock();
                    Data2Key = ms.ToArray();
                    ms.Close();
                    cs.Close();
                }
            }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// Default constructor for internal derived classes only: resulting object not in usable state
        /// </summary>
        private protected IRD()
        {
            // Assumes that derived class will set private variables and generate in its own constructor
        }

        /// <summary>
        /// Constructor that reads an existing IRD file and stores its fields in the IRD object
        /// </summary>
        /// <param name="irdPath">Path to IRD file to read data from</param>
        public IRD(string irdPath)
        {
            Read(irdPath);
        }

        /// <summary>
        /// Constructor that reads required fields from .getkey.log file
        /// </summary>
        /// <param name="isoPath"></param>
        /// <param name="getKeyLog"></param>
        public IRD(string isoPath, string getKeyLog)
        {
            // Parse Disc Key, Disc ID, and PIC from the .getkey.log file
            ParseGetKeyLog(getKeyLog);

            // Generate the remaining IRD fields from the disc drive or mounted ISO
            Generate(isoPath);
        }

        /// <summary>
        /// Constructor with given required fields
        /// </summary>
        /// <param name="isoPath">Path to the ISO</param>
        /// <param name="discKey">Disc Key, byte array of length 16</param>
        /// <param name="discID">Disc ID, byte array of length 16</param>
        /// <param name="discPIC">Disc PIC, byte array of length 115</param>
        public IRD(string isoPath, byte[] discKey, byte[] discID, byte[] discPIC)
        {
            // Parse DiscKey, DiscID, and PIC
            GenerateD1(discKey);
            GenerateD2(discID);
            PIC = discPIC;

            // Generate the remaining IRD fields from the disc drive or mounted ISO
            Generate(isoPath);
        }

        #endregion

        #region Methods

        /// <summary>
        /// Generates D1, D2, and PIC from a GetKey log
        /// </summary>
        /// <param name="getKeyLog">Path to a .getkey.log file</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="InvalidDataException"></exception>
        private protected void ParseGetKeyLog(string getKeyLog)
        {
            // Validate getKeyLog
            if (getKeyLog == null || !File.Exists(getKeyLog))
                throw new ArgumentNullException(nameof(getKeyLog));

            // Read from .getkey.log file
            byte[] discKey;
            byte[] discID;
            byte[] discPIC;
            using (var sr = File.OpenText(getKeyLog))
            {
                string line;

                // Determine whether GetKey was successful
                while ((line = sr.ReadLine()) != null && line.Trim().StartsWith("get_dec_key succeeded!") == false) ;
                if (line == null)
                    throw new InvalidDataException(".getkey.log contains errors");

                // Look for Disc Key in log
                while ((line = sr.ReadLine()) != null && line.Trim().StartsWith("disc_key = ") == false) ;
                if (line == null)
                    throw new InvalidDataException("Could not find Disc Key in .getkey.log");
                // Get Disc Key from log
                string discKeyStr = line.Substring("disc_key = ".Length);
                // Validate Disc Key from log
                if (discKeyStr.Length != 32)
                    throw new InvalidDataException("Unexpected Disc Key in .getkey.log");
                // Convert Disc Key to byte array
                discKey = Utilities.HexToBytes(discKeyStr);

                // Read Disc ID
                while ((line = sr.ReadLine()) != null && line.Trim().StartsWith("disc_id = ") == false) ;
                if (line == null)
                    throw new InvalidDataException("Could not find Disc ID in .getkey.log");
                // Get Disc ID from log
                string discIDStr = line.Substring("disc_id = ".Length);
                // Validate Disc ID from log
                if (discIDStr.Length != 32)
                    throw new InvalidDataException("Unexpected Disc ID in .getkey.log");
                // Replace X's in Disc ID with 00000001
                discIDStr = discIDStr.Substring(0, 24) + "00000001";
                // Convert Disc ID to byte array
                discID = Utilities.HexToBytes(discIDStr);

                // Look for PIC in log
                while ((line = sr.ReadLine()) != null && line.Trim().StartsWith("PIC:") == false) ;
                if (line == null)
                    throw new InvalidDataException("Could not find PIC in .getkey.log");
                // Get PIC from log
                string discPICStr = "";
                for (int i = 0; i < 8; i++)
                {
                    line = sr.ReadLine();
                    if (line == null)
                        throw new InvalidDataException("Incomplete PIC in .getkey.log");
                    discPICStr += line;
                }
                // Validate PIC from log
                if (discPICStr.Length != 256)
                    throw new InvalidDataException("Unexpected PIC in .getkey.log");
                // Convert PIC to byte array
                discPIC = Utilities.HexToBytes(discPICStr.Substring(0, 230));

                // Check for warnings in .getkey.log
                while ((line = sr.ReadLine()) != null && line.Trim().StartsWith("WARNING") == false && line.Trim().StartsWith("SUCCESS") == false)
                {
                    string t = line.Trim();
                    if (t.StartsWith("WARNING"))
                        throw new InvalidDataException(".getkey.log contains errors");
                    else if (t.StartsWith("SUCCESS"))
                        break;
                }
            }

            // Store values
            GenerateD1(discKey);
            GenerateD2(discID);
            PIC = discPIC;
        }

        /// <summary>
        /// Generate IRD fields from a disc drive or mounted ISO
        /// </summary>
        /// <param name="isoPath">Path to the ISO</param>
        /// <exception cref="ArgumentException"></exception>
        private protected void Generate(string isoPath)
        {
            // Validate ISO path
            if (isoPath == null || isoPath.Length <= 0)
                throw new ArgumentNullException(nameof(isoPath));

            // TODO: Code the difficult part (remove these initial values)
            TitleID = "\0\0\0\0\0\0\0\0\0";
            Title = "\0";
            SystemVersion = "\0\0\0\0";
            GameVersion = "\0\0\0\0\0";
            AppVersion = "\0\0\0\0\0";
            HeaderLength = 6052;
            Header = new byte[] { 0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xED, 0xDD, 0x0F, 0x74, 0x5D, 0x75, 0x81, 0x27, 0xF0, 0xDF, 0x4D, 0xD2, 0xE4, 0xB5, 0x29, 0x25, 0x94, 0x3F, 0x6D, 0x69, 0x0B, 0xAF, 0x7F, 0x28, 0xB5, 0x96, 0x90, 0x36, 0x11, 0x2A, 0x30, 0x4E, 0xF3, 0xAF, 0x21, 0x7B, 0xD2, 0xE4, 0x99, 0x3F, 0x45, 0x64, 0x9D, 0x10, 0x69, 0xC0, 0x62, 0xDB, 0x94, 0x34, 0x50, 0xD0, 0x01, 0x7A, 0x18, 0x15, 0x5D, 0x67, 0x75, 0x38, 0x8A, 0x88, 0xC7, 0x73, 0x28, 0xAC, 0xEB, 0x59, 0xCE, 0xC1, 0x75, 0x50, 0xD6, 0x3D, 0x70, 0x76, 0x56, 0x98, 0xD9, 0x19, 0x9C, 0x9D, 0x19, 0xB5, 0xAE, 0xEE, 0xE0, 0x71, 0x96, 0xAD, 0xE2, 0x8E, 0xE8, 0x11, 0x4E, 0xD7, 0x9D, 0xD5, 0xD9, 0x19, 0xFE, 0xEC, 0xEF, 0xBE, 0x77, 0x5F, 0x9B, 0xD4, 0x34, 0xB6, 0xB5, 0x6D, 0x5A, 0xF8, 0x7C, 0xEA, 0x7B, 0xBF, 0xFB, 0xEE, 0xFB, 0xFD, 0xEE, 0xBB, 0xF7, 0xE5, 0xE2, 0xF7, 0xF7, 0xFB, 0xBD, 0x9B, 0xBC, 0x10, 0x42, 0x45, 0x38, 0xA0, 0xFA, 0xEB, 0x21, 0x2C, 0xDB, 0x13, 0x2A, 0x96, 0x7D, 0x3D, 0x00, 0x00, 0x6F, 0x58, 0x85, 0xAD, 0x43, 0x77, 0xF4, 0x8D, 0x0D, 0x8D, 0x6D, 0x19, 0xD9, 0xDE, 0x98, 0x3E, 0x6E, 0xE9, 0x1A, 0xE8, 0xBB, 0xA4, 0x71, 0xCD, 0xDB, 0x1A, 0xDE, 0x96, 0x9F, 0xD4, 0xA1, 0xED, 0xBF, 0x9F, 0xFB, 0xCC, 0xD9, 0x6F, 0x9F, 0x7F, 0xE5, 0x27, 0x7F, 0xF0, 0xFE, 0x2F, 0xBC, 0xFB, 0xCB, 0xEB, 0x5E, 0xF9, 0x4A, 0xF2, 0xB9, 0xEF, 0x84, 0x1F, 0xFE, 0xEC, 0x5F, 0x7D, 0xA4, 0xF3, 0x7F, 0x3D, 0xFB, 0xA9, 0xD9, 0x2B, 0xBA, 0xAE, 0xF9, 0xCB, 0x2F, 0xFE, 0xEC, 0xD2, 0x81, 0x67, 0xFF, 0xB9, 0xF1, 0xA7, 0xF7, 0x5D, 0x77, 0x4B, 0xCB, 0x97, 0xFE, 0x74, 0xCD, 0x5F, 0x3F, 0x77, 0xE1, 0xD8, 0x8F, 0x3E, 0xF3, 0x87, 0x3F, 0xF9, 0xF4, 0xB2, 0xD7, 0xBE, 0xFF, 0xAB, 0x8B, 0xBE, 0x7B, 0xD7, 0xAE, 0x86, 0x86, 0x6F, 0x5E, 0xFD, 0xB7, 0x8F, 0xAD, 0xFA, 0xC2, 0x9A, 0x7D, 0xDF, 0x79, 0x66, 0xC9, 0xFD, 0x9F, 0xFE, 0xC2, 0x25, 0x8F, 0xBD, 0xB8, 0xE6, 0xC9, 0x27, 0x3E, 0x77, 0xDF, 0x2D, 0xDB, 0xB6, 0xAE, 0x1B, 0xFC, 0xAB, 0xE4, 0xD5, 0xDF, 0xF9, 0xD4, 0xD7, 0x3F, 0xFD, 0xF5, 0xDA, 0x8B, 0xEF, 0x6C, 0xB9, 0xA8, 0xEF, 0xD3, 0xD7, 0xCF, 0x5D, 0xBE, 0x30, 0x77, 0xFE, 0xAA, 0x19, 0x3F, 0x7A, 0x7E, 0xCE, 0xB7, 0xAE, 0x69, 0x7A, 0xBC, 0xE3, 0xF1, 0xBD, 0x5F, 0xFC, 0xD8, 0xA3, 0x5F, 0x3A, 0xFB, 0x17, 0x4F, 0xDE, 0xFC, 0x83, 0xBF, 0xB8, 0xF2, 0xF9, 0x1F, 0xCF, 0x5A, 0xF0, 0x0F, 0x2F, 0x3D, 0xF1, 0xDC, 0x87, 0xEF, 0x1F, 0xEA, 0xFF, 0xF9, 0xEF, 0x7F, 0xEE, 0xEE, 0x7C, 0xE5, 0x07, 0xEE, 0x6A, 0x3E, 0xFB, 0xE5, 0x27, 0xCE, 0x78, 0xB5, 0xF6, 0xA5, 0x3B, 0xE6, 0xDE, 0x77, 0xC3, 0x3D, 0x1B, 0xD6, 0xBC, 0xF3, 0x27, 0x7F, 0xBB, 0x7F, 0xD1, 0x8E, 0x47, 0x67, 0xBF, 0xF8, 0x8D, 0xBF, 0xBF, 0xF9, 0x03, 0x2F, 0x3E, 0x7A, 0xEF, 0x75, 0xCF, 0x5D, 0xF9, 0xEA, 0xDD, 0x3B, 0x3F, 0xFF, 0x6F, 0x5E, 0xF9, 0x9B, 0xC7, 0x76, 0xFC, 0xBC, 0x63, 0xE3, 0x73, 0xFF, 0xE3, 0xAB, 0xF3, 0x3E, 0xF9, 0xEC, 0x0B, 0xBB, 0x5E, 0xFE, 0xD7, 0x9F, 0xD9, 0xFA, 0xE5, 0xAB, 0xAE, 0xFA, 0xE3, 0x57, 0x7E, 0xF5, 0xDF, 0x2F, 0x3C, 0xFB, 0xEF, 0x9F, 0xFC, 0x8B, 0xB5, 0xEF, 0x79, 0xE7, 0x8B, 0x8D, 0x03, 0x77, 0x2F, 0xFA, 0xDA, 0x7D, 0x4D, 0x7B, 0x06, 0x9F, 0xFA, 0x87, 0x47, 0x1E, 0xD8, 0xFF, 0x8B, 0x2D, 0xEF, 0x5D, 0xFE, 0xAD, 0xF7, 0x7D, 0xF7, 0x81, 0xFF, 0xF8, 0xD6, 0xEE, 0x8F, 0x7E, 0x6A, 0xEC, 0xF1, 0xEB, 0xDF, 0xF3, 0xBD, 0xD6, 0xF7, 0xF6, 0x5C, 0xF1, 0xE0, 0xFB, 0x5E, 0x7B, 0xFC, 0xB3, 0xDF, 0xB9, 0xFB, 0xCA, 0x07, 0x57, 0x2E, 0x3B, 0xE3, 0x9A, 0x57, 0x7A, 0xBE, 0xF1, 0x77, 0x9F, 0xB8, 0xBA, 0x6F, 0xC6, 0xCB, 0x7B, 0x67, 0xDE, 0xFA, 0xAB, 0x3B, 0x9F, 0x7D, 0xC7, 0x5D, 0xF7, 0x7C, 0xEB, 0xA1, 0x85, 0x7F, 0xB3, 0xF5, 0xF9, 0xEA, 0x95, 0xEF, 0x7E, 0x71, 0xC3, 0x9C, 0x6F, 0x74, 0xFF, 0xF0, 0xA5, 0xDF, 0xF9, 0xEA, 0x47, 0x9F, 0xFB, 0x7F, 0xFB, 0xEF, 0xB8, 0xF7, 0xFD, 0x15, 0xB7, 0x3F, 0x71, 0xFB, 0xA3, 0x37, 0xFD, 0xEA, 0x86, 0x3F, 0x7B, 0xE2, 0xE3, 0xAF, 0xFE, 0xE4, 0x0F, 0x3F, 0xBE, 0xE0, 0x3F, 0xE7, 0x1F, 0xF9, 0xBD, 0x5F, 0x56, 0x6E, 0xFB, 0xD2, 0x5D, 0xFF, 0xE2, 0x4F, 0xAE, 0xBB, 0xEE, 0x7B, 0x9D, 0x3F, 0xFA, 0xE7, 0x81, 0xEE, 0xD7, 0x3B, 0xDE, 0x37, 0xFB, 0xCB, 0xFF, 0x7E, 0xF5, 0x15, 0xAB, 0x5E, 0xBE, 0x62, 0xE4, 0xDC, 0xFF, 0x72, 0xE1, 0xFB, 0xEF, 0x7F, 0x29, 0xBF, 0xB7, 0xE1, 0xA3, 0x6F, 0x79, 0x6D, 0xCF, 0xB7, 0x5B, 0xBE, 0x7B, 0xD3, 0x45, 0x33, 0x6F, 0x7B, 0xD7, 0x5F, 0xAE, 0xBD, 0xF8, 0xB1, 0xD1, 0x1F, 0xFE, 0xDD, 0x3B, 0x17, 0x7C, 0x7B, 0xCE, 0xDD, 0x4F, 0x7C, 0x78, 0xCB, 0xBB, 0x7F, 0xFA, 0xA7, 0x7F, 0x94, 0xFF, 0x9F, 0x9F, 0xF8, 0x93, 0x8E, 0x6F, 0xBF, 0xEB, 0x1B, 0xF3, 0x9F, 0xBC, 0xF2, 0xC7, 0x63, 0xDD, 0xAF, 0xBC, 0x76, 0xE6, 0xC5, 0x1F, 0x7B, 0x65, 0xE6, 0x4F, 0xF3, 0x57, 0x5C, 0x79, 0xC5, 0x7F, 0xF8, 0xEA, 0x1D, 0x8D, 0x4D, 0x1F, 0xDF, 0x50, 0xBF, 0xE8, 0xE7, 0xDF, 0xF3, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE4, 0x92, 0xD6, 0xB6, 0x86, 0x86, 0x35, 0x49, 0xC8, 0xFF, 0x06, 0x85, 0xBE, 0xC6, 0x4D, 0x3D, 0x5D, 0x03, 0x1B, 0xDB, 0xF3, 0x53, 0x7F, 0x2F, 0xF0, 0xD3, 0xCB, 0x2A, 0x42, 0xA8, 0x58, 0xF6, 0xF4, 0x6F, 0x7C, 0xDD, 0xF8, 0xBF, 0xF4, 0x16, 0x72, 0xB9, 0xB0, 0xB5, 0xB4, 0x6A, 0x6B, 0x3E, 0x39, 0xF0, 0xEC, 0x92, 0xF4, 0x7E, 0x69, 0x58, 0x5A, 0x5C, 0x93, 0x2C, 0x0D, 0xB9, 0xB4, 0xCC, 0x85, 0x5D, 0xB9, 0x5C, 0xD5, 0xBC, 0xC5, 0xA1, 0xA2, 0xDC, 0xFE, 0x37, 0xED, 0x15, 0x1C, 0x47, 0x6B, 0x1B, 0xD6, 0xBC, 0xBD, 0x61, 0x5D, 0xFC, 0xD7, 0xB4, 0xB6, 0x71, 0xED, 0xDB, 0x1B, 0x1A, 0x42, 0xC3, 0x21, 0x8E, 0x60, 0x45, 0xE2, 0xFF, 0x73, 0x80, 0x53, 0x43, 0x45, 0x96, 0xFF, 0xBF, 0x51, 0x21, 0xF4, 0x85, 0xC6, 0xB0, 0x29, 0xF4, 0x84, 0xAE, 0x30, 0x10, 0x36, 0x86, 0xF6, 0xC9, 0xAB, 0x95, 0xF3, 0xFF, 0xA2, 0x4B, 0xD7, 0x1F, 0x71, 0xFE, 0x7F, 0xBE, 0xB4, 0xEA, 0xF3, 0xEB, 0x0F, 0xE6, 0x7F, 0x73, 0x29, 0xFF, 0x5B, 0x4A, 0xF9, 0xDF, 0x72, 0xB8, 0xFC, 0x3F, 0xD2, 0xBD, 0x82, 0xE3, 0x40, 0xFE, 0x03, 0x6F, 0x20, 0xAF, 0x1F, 0x69, 0xFE, 0x03, 0x00, 0x6F, 0x1C, 0x2D, 0xED, 0xCD, 0xF2, 0x1F, 0x00, 0xDE, 0x64, 0xBA, 0xFB, 0x7A, 0x1B, 0x1A, 0xE5, 0x3F, 0x00, 0xBC, 0xA9, 0xF4, 0x1B, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF1, 0x96, 0x84, 0xCA, 0x30, 0x18, 0xCB, 0xE7, 0x46, 0xF7, 0x27, 0xF9, 0x71, 0xEB, 0x73, 0x85, 0xBE, 0xC6, 0x4D, 0x3D, 0x5D, 0x03, 0x1B, 0x27, 0xFF, 0x46, 0xDD, 0x59, 0x49, 0x6C, 0x59, 0x11, 0xDB, 0x26, 0xC5, 0x6D, 0xC4, 0xFA, 0x4D, 0x1B, 0x1A, 0xD6, 0xAD, 0x5D, 0xDB, 0xDE, 0x5E, 0xFE, 0xA2, 0xD3, 0xA9, 0xDB, 0x1F, 0x6F, 0xE7, 0x87, 0x9E, 0xBE, 0xFE, 0xE6, 0x7C, 0xEB, 0xC8, 0xB6, 0x1D, 0xA3, 0xC3, 0x3B, 0x77, 0x0E, 0x6F, 0xCE, 0x0F, 0x6C, 0xDF, 0x72, 0xC3, 0xC8, 0xE6, 0xE1, 0x23, 0xDE, 0xC2, 0x6F, 0xDB, 0xFE, 0x50, 0xAB, 0x0A, 0x5D, 0xCD, 0xD7, 0xC6, 0x6D, 0xF6, 0x77, 0xF6, 0x74, 0xAF, 0xEC, 0x7D, 0x4B, 0xE3, 0xA1, 0xCF, 0xD7, 0xBD, 0x50, 0x53, 0xFA, 0x32, 0xE3, 0xB4, 0x6E, 0x5F, 0x6B, 0x7B, 0x67, 0xBE, 0xA5, 0xED, 0xD2, 0xB6, 0x4D, 0x6D, 0xF9, 0x8E, 0xE1, 0xED, 0xC3, 0xA3, 0x43, 0x63, 0x23, 0xA3, 0x4E, 0x4E, 0x00, 0x4E, 0x98, 0xAA, 0x98, 0xE1, 0xF5, 0xB1, 0x2C, 0xFC, 0xF9, 0xFE, 0x64, 0x49, 0x96, 0xE5, 0x61, 0xD5, 0x40, 0xDB, 0x86, 0x7C, 0xD7, 0xA6, 0x7C, 0xE7, 0xF6, 0x1B, 0x47, 0xC6, 0xD5, 0x2D, 0x54, 0x1C, 0x9F, 0xAC, 0xCC, 0x9D, 0xDC, 0xBE, 0xC1, 0xAF, 0xF5, 0x5D, 0x4E, 0xEA, 0xAB, 0xC9, 0x76, 0x00, 0x4E, 0x41, 0x33, 0x62, 0xFE, 0xFF, 0x59, 0x2C, 0x1F, 0xA9, 0xDE, 0x9F, 0x2C, 0x8D, 0x65, 0x45, 0xB9, 0x0F, 0xF0, 0xD6, 0xE2, 0x17, 0x03, 0x9E, 0xC2, 0xF3, 0x16, 0x21, 0x5C, 0x1F, 0xEF, 0x06, 0x97, 0x56, 0xC8, 0x58, 0x00, 0x38, 0x4A, 0xD5, 0x31, 0xFF, 0x1F, 0x8C, 0xE5, 0xAD, 0x33, 0x5F, 0x4E, 0x96, 0xC5, 0xB2, 0xF2, 0x8D, 0x30, 0xBE, 0xCF, 0xA5, 0xE3, 0xEE, 0xE2, 0x41, 0xA4, 0x13, 0x19, 0xE9, 0x81, 0x6C, 0xDD, 0x32, 0xB4, 0x7D, 0xAC, 0x34, 0x87, 0x51, 0x59, 0xAA, 0x55, 0x77, 0xB0, 0x1F, 0x91, 0xDA, 0x90, 0xF5, 0x7D, 0x4E, 0xF9, 0xBE, 0x44, 0xDC, 0xEF, 0xEB, 0xD3, 0xFD, 0xAE, 0x4E, 0xF7, 0xBC, 0x62, 0x7D, 0xC8, 0x66, 0x6B, 0x36, 0x0E, 0x8F, 0x0D, 0x6D, 0x1E, 0x1A, 0x1B, 0xCA, 0x17, 0x86, 0x46, 0xC7, 0xB6, 0x8C, 0x6D, 0x19, 0xD9, 0x5E, 0x9E, 0xAD, 0x29, 0x1F, 0xE1, 0xFA, 0xD8, 0x53, 0x7A, 0x3D, 0xCA, 0xC7, 0xE5, 0xBC, 0x13, 0x1F, 0xE0, 0x4D, 0xAE, 0x26, 0x26, 0xFE, 0x57, 0x62, 0xB9, 0xED, 0xCC, 0x5C, 0x58, 0x1E, 0xD2, 0xCF, 0x03, 0x00, 0x80, 0x37, 0xBA, 0x5C, 0xCC, 0xFF, 0x25, 0xC5, 0xA5, 0xFD, 0xC9, 0x45, 0xDE, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x93, 0x24, 0x54, 0x86, 0xBB, 0x63, 0xF9, 0xDC, 0xE8, 0xFE, 0x64, 0xFD, 0xB8, 0xF5, 0xB9, 0x42, 0x5F, 0xE3, 0xA6, 0x9E, 0xAE, 0x81, 0x8D, 0xED, 0x93, 0x36, 0x9B, 0x95, 0xC4, 0x96, 0x15, 0xB1, 0x6D, 0x52, 0xDC, 0x46, 0xAC, 0xDF, 0xB4, 0xA1, 0x61, 0xDD, 0xDA, 0xB5, 0xED, 0xED, 0x0D, 0x99, 0xA9, 0xDB, 0x1F, 0x6F, 0xE7, 0x87, 0x9E, 0xBE, 0xFE, 0xE6, 0x7C, 0xEB, 0xC8, 0xB6, 0x1D, 0xA3, 0xC3, 0x3B, 0x77, 0x0E, 0x6F, 0xCE, 0x0F, 0x6C, 0xDF, 0x72, 0xC3, 0xC8, 0xE6, 0xE1, 0x23, 0xDE, 0xC2, 0x6F, 0xDB, 0xFE, 0x50, 0xAB, 0x0A, 0x5D, 0xCD, 0xD7, 0xC6, 0x6D, 0xF6, 0x77, 0xF6, 0x74, 0xAF, 0xEC, 0x7D, 0x4B, 0xE3, 0xA1, 0xCF, 0xD7, 0xBD, 0x50, 0x93, 0xCB, 0x55, 0xCD, 0x5B, 0x5C, 0xAC, 0xDB, 0xD7, 0xDA, 0xDE, 0x99, 0x6F, 0x69, 0xBB, 0xB4, 0x6D, 0x53, 0x5B, 0xBE, 0x63, 0x78, 0xFB, 0xF0, 0xE8, 0xD0, 0xD8, 0xC8, 0xA8, 0x93, 0x13, 0x80, 0x13, 0xA6, 0x2A, 0x66, 0x78, 0x77, 0x2C, 0x0B, 0x7F, 0xBE, 0x3F, 0x69, 0xCE, 0xB2, 0x3C, 0xAC, 0x1A, 0x68, 0xDB, 0x90, 0xEF, 0xDA, 0x94, 0xEF, 0xDC, 0x7E, 0xE3, 0xC8, 0xB8, 0xBA, 0x85, 0x8A, 0xE3, 0x93, 0x95, 0xB9, 0x93, 0xDB, 0x37, 0xF8, 0xB5, 0xBE, 0xCB, 0x49, 0x7D, 0x35, 0xD9, 0x0E, 0xC0, 0x29, 0x68, 0x46, 0xCC, 0xFF, 0x17, 0x62, 0xF9, 0x48, 0xF5, 0xFE, 0xA4, 0x25, 0x96, 0x15, 0xE5, 0x3E, 0xC0, 0x5B, 0xBB, 0xFB, 0x7A, 0x1B, 0x1A, 0x4F, 0xE1, 0x79, 0x8B, 0x10, 0xAE, 0x8F, 0x77, 0x83, 0x4B, 0x2B, 0x64, 0x2C, 0x00, 0x1C, 0xA5, 0xEA, 0x98, 0xFF, 0x4F, 0xC6, 0xF2, 0xD6, 0x99, 0x2F, 0x27, 0xAD, 0xB1, 0xAC, 0x7C, 0x23, 0x8C, 0xEF, 0x73, 0xE9, 0xB8, 0xBB, 0x78, 0x10, 0xE9, 0x44, 0x46, 0x7A, 0x20, 0x5B, 0xB7, 0x0C, 0x6D, 0x1F, 0x2B, 0xCD, 0x61, 0x54, 0x96, 0x6A, 0xD5, 0x1D, 0xEC, 0x47, 0xA4, 0x36, 0x64, 0x7D, 0x9F, 0x53, 0xBE, 0x2F, 0x11, 0xF7, 0xFB, 0xFA, 0x74, 0xBF, 0xAB, 0xD3, 0x3D, 0xAF, 0x58, 0x1F, 0xB2, 0xD9, 0x9A, 0x8D, 0xC3, 0x63, 0x43, 0x9B, 0x87, 0xC6, 0x86, 0xF2, 0x85, 0xA1, 0xD1, 0xB1, 0x2D, 0x63, 0x5B, 0x46, 0xB6, 0x97, 0x67, 0x6B, 0xCA, 0x47, 0xB8, 0x3E, 0xF6, 0x94, 0x5E, 0x8F, 0xF2, 0x71, 0x39, 0xEF, 0xC4, 0x07, 0x78, 0x93, 0xAB, 0x89, 0x89, 0xFF, 0x9D, 0x58, 0x6E, 0x3B, 0x33, 0x17, 0xDA, 0x42, 0xFA, 0x79, 0x00, 0x00, 0xF0, 0x46, 0x97, 0x8B, 0xF9, 0xDF, 0x5C, 0x5C, 0xDA, 0x9F, 0xB4, 0x7B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4E, 0x66, 0x86, 0xCA, 0xF0, 0x7F, 0x62, 0xF9, 0xF2, 0xC2, 0xBB, 0xC2, 0xF5, 0xE9, 0x8A, 0xBA, 0x17, 0x6A, 0x72, 0xB9, 0xAA, 0x79, 0x8B, 0xE3, 0x62, 0x32, 0xAE, 0xDE, 0x6B, 0xAF, 0xBF, 0x7E, 0xF7, 0x54, 0xDB, 0xA9, 0x88, 0xB7, 0xFA, 0x71, 0x8F, 0x07, 0x97, 0x56, 0x84, 0x7C, 0xBA, 0xB0, 0xAA, 0xAF, 0xB5, 0xBD, 0x33, 0xDF, 0xD2, 0x76, 0x69, 0xDB, 0xA6, 0xB6, 0x7C, 0xC7, 0xF0, 0xF6, 0xE1, 0xD1, 0xA1, 0xB1, 0x91, 0xD1, 0x03, 0xF5, 0xCE, 0x88, 0xB7, 0x9A, 0x78, 0x2B, 0x54, 0xA4, 0xFF, 0xFC, 0x3C, 0x00, 0xE0, 0x64, 0xC8, 0xC5, 0xFC, 0x7F, 0x4F, 0x71, 0x69, 0x7F, 0x32, 0xE4, 0xED, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x30, 0x2A, 0x42, 0x65, 0xF8, 0x62, 0x2C, 0xFB, 0xAF, 0xDB, 0x9F, 0x84, 0x24, 0x2E, 0xEC, 0x0E, 0x21, 0x1F, 0x4A, 0xE5, 0x7A, 0x6F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x9B, 0x46, 0x12, 0x96, 0x26, 0xE9, 0x7D, 0x08, 0xB9, 0xB0, 0xAC, 0xB8, 0x54, 0xE8, 0x6B, 0x1C, 0xEC, 0x68, 0xDE, 0xD8, 0x3E, 0x2B, 0xAC, 0x3C, 0xF0, 0x78, 0xA0, 0xD0, 0xD6, 0xDC, 0xDF, 0x5E, 0x1D, 0x96, 0xC7, 0x35, 0x15, 0xA1, 0xAB, 0xB3, 0xB5, 0xAD, 0xB3, 0xB7, 0x26, 0x5C, 0x54, 0x7C, 0xD4, 0xDF, 0xDB, 0x53, 0x88, 0x0F, 0x43, 0x75, 0xB8, 0xB8, 0xF8, 0x78, 0xA0, 0xAF, 0x37, 0x3E, 0x9C, 0x1D, 0x56, 0xC4, 0x47, 0x33, 0x42, 0x77, 0xE1, 0x9A, 0xDE, 0x86, 0xCB, 0x2F, 0x5B, 0xB7, 0x6E, 0xB0, 0xA1, 0xC1, 0xBB, 0x0D, 0x00, 0xA7, 0x4A, 0xFE, 0xC7, 0xDB, 0xD2, 0xB4, 0xC8, 0xA5, 0x4B, 0xCB, 0x42, 0x72, 0x30, 0xFF, 0xE3, 0xE3, 0x95, 0xA5, 0xC7, 0xE5, 0xFC, 0x8F, 0x6B, 0x96, 0x87, 0x8A, 0x72, 0xFE, 0xC7, 0x47, 0x17, 0x85, 0x8A, 0x83, 0xF9, 0x1F, 0x1F, 0x5F, 0x1C, 0x2A, 0xCA, 0xF9, 0x1F, 0x1F, 0xAD, 0x08, 0x33, 0xE4, 0x3F, 0x00, 0x9C, 0x7A, 0x56, 0x16, 0xC7, 0xFF, 0xC5, 0x3E, 0x40, 0xDA, 0x01, 0x88, 0x77, 0xBB, 0x72, 0xB9, 0xAA, 0x79, 0x8B, 0xE3, 0x40, 0x3E, 0xED, 0x14, 0x24, 0xC9, 0x91, 0xD6, 0xCB, 0x2A, 0x5E, 0x16, 0xF6, 0x94, 0xEA, 0xED, 0x29, 0x76, 0x08, 0xE2, 0x5D, 0x56, 0xAF, 0xD4, 0xD7, 0x48, 0xE6, 0xA4, 0xDD, 0x89, 0xB6, 0xCE, 0xBE, 0xD6, 0xFA, 0xBE, 0x0D, 0x2D, 0x57, 0xAE, 0xC9, 0xB6, 0xDE, 0x50, 0x9C, 0x7B, 0x28, 0xF6, 0x3F, 0x26, 0xDD, 0x7A, 0xAE, 0xDC, 0x29, 0xC9, 0xEA, 0xAF, 0x2D, 0xCE, 0x4D, 0x14, 0xFB, 0x27, 0x93, 0xD6, 0x9F, 0x75, 0xB0, 0xD3, 0xE2, 0x47, 0x0C, 0x00, 0x93, 0xE4, 0xFF, 0xD4, 0xC9, 0x7B, 0xB4, 0xF9, 0xBF, 0x36, 0x3C, 0x52, 0xAA, 0xF7, 0x48, 0xD7, 0x6D, 0xE9, 0xFA, 0xDB, 0xBA, 0x76, 0xCD, 0x4A, 0xC2, 0x59, 0x97, 0x94, 0xF3, 0xBF, 0xB6, 0xB3, 0xB5, 0xA7, 0xBB, 0xA1, 0xBE, 0xD0, 0xDD, 0x51, 0x0E, 0xFF, 0xFA, 0xE2, 0xA7, 0x0A, 0xC5, 0x99, 0x85, 0x49, 0xB7, 0x5C, 0x5D, 0x9A, 0x6E, 0x38, 0x90, 0xFC, 0x0F, 0x97, 0x6A, 0x3F, 0x5C, 0x57, 0x95, 0x96, 0x55, 0x75, 0x13, 0xFB, 0x17, 0xB5, 0x85, 0xE6, 0xDE, 0xE6, 0x8D, 0xB1, 0x73, 0xD1, 0x53, 0xDE, 0xFE, 0xDA, 0xB0, 0xB7, 0xD4, 0x62, 0xEF, 0x55, 0x37, 0xAF, 0x08, 0x61, 0xC5, 0xCD, 0x57, 0x8D, 0xCE, 0x5C, 0x98, 0xCC, 0x5D, 0x56, 0x6E, 0x31, 0xAB, 0xD0, 0xD9, 0xBA, 0x66, 0xFC, 0x0E, 0x85, 0xA6, 0xF0, 0x50, 0xA9, 0xEF, 0xF2, 0x50, 0x38, 0x27, 0x2D, 0xCF, 0x39, 0xA4, 0x0F, 0x73, 0x46, 0xEC, 0x5D, 0x74, 0xF5, 0x74, 0xF4, 0xD4, 0xC7, 0xFE, 0xC5, 0xC1, 0xA3, 0xB8, 0xA8, 0xF4, 0x2A, 0x17, 0x4D, 0x7E, 0x14, 0x35, 0xE5, 0x69, 0x92, 0xAC, 0xF6, 0xC5, 0xA5, 0xDA, 0x17, 0x1F, 0xE6, 0x98, 0x4B, 0x93, 0x28, 0x4E, 0x4F, 0x00, 0x4E, 0x58, 0xFE, 0x4F, 0x9D, 0xBE, 0xC9, 0x91, 0xF6, 0x13, 0x92, 0xF2, 0x48, 0xFE, 0xE9, 0x52, 0x76, 0x3E, 0x5D, 0x5A, 0x1F, 0x0E, 0xC9, 0xCE, 0x99, 0x31, 0xCD, 0xC7, 0xE7, 0x26, 0x00, 0x30, 0x1D, 0xF9, 0x3F, 0xF5, 0xB8, 0xF5, 0x68, 0xF3, 0xBF, 0xA9, 0x78, 0xDD, 0x5F, 0xF1, 0xB3, 0xFF, 0x49, 0xEB, 0xCD, 0x76, 0x41, 0x00, 0x00, 0x9C, 0x02, 0xF9, 0x3F, 0x75, 0x5E, 0x27, 0x47, 0xDA, 0x4F, 0x38, 0x90, 0xFF, 0xEB, 0x8B, 0x33, 0xEB, 0xCB, 0xD6, 0xEF, 0x1B, 0x89, 0x4F, 0x55, 0x8C, 0xEC, 0x1B, 0x9D, 0x59, 0x57, 0xDD, 0x74, 0x41, 0x79, 0xFC, 0x3F, 0x3B, 0x9D, 0x07, 0xBF, 0xFA, 0xDA, 0xFA, 0xFE, 0xDE, 0x82, 0x29, 0x00, 0x00, 0x98, 0xB6, 0xFC, 0x9F, 0xFA, 0x93, 0xE8, 0xA3, 0x1D, 0xFF, 0x5F, 0x15, 0x1E, 0x5D, 0x94, 0x96, 0x8B, 0x1E, 0xDD, 0xF7, 0x78, 0x53, 0xEC, 0x0E, 0x3C, 0xBE, 0x6F, 0x57, 0xAE, 0xA6, 0xE6, 0x82, 0xCB, 0xCB, 0xF9, 0x7F, 0x6E, 0xF3, 0x40, 0x5B, 0x67, 0xCF, 0xE0, 0xC6, 0x81, 0xBE, 0xCE, 0xD6, 0xC1, 0x42, 0x5F, 0x63, 0x7D, 0x4B, 0xF3, 0x81, 0x8E, 0xC0, 0x15, 0xA1, 0x7E, 0x61, 0x5A, 0x2E, 0xAC, 0xDF, 0xBD, 0xB7, 0x36, 0x84, 0xDA, 0xBD, 0xBB, 0x8B, 0x6D, 0xEB, 0xCB, 0x6D, 0xCF, 0x2E, 0xB5, 0xED, 0xDB, 0xF0, 0xAE, 0x43, 0x5B, 0xAE, 0x0D, 0xFB, 0x4A, 0x9F, 0x3A, 0xEC, 0xDB, 0xB7, 0x72, 0x49, 0x08, 0x4B, 0x56, 0xEE, 0xDB, 0x55, 0x3B, 0xB3, 0x66, 0xC6, 0xB9, 0xE5, 0x96, 0xB5, 0xED, 0x2D, 0x3D, 0x3D, 0xFD, 0xF5, 0x2D, 0x9D, 0xDD, 0x07, 0x5F, 0xEB, 0xFE, 0x39, 0x69, 0x39, 0xE7, 0xFE, 0xF0, 0xCC, 0xE6, 0x10, 0x36, 0x3F, 0x13, 0x76, 0xD5, 0x56, 0xCF, 0x5B, 0xBC, 0xA4, 0xDC, 0x62, 0x6E, 0x7A, 0xB5, 0x61, 0x5B, 0x73, 0x7F, 0x73, 0xE9, 0xA5, 0x36, 0x14, 0xC6, 0x5D, 0x1D, 0x50, 0x5D, 0x9B, 0x96, 0xB5, 0xD5, 0xBB, 0x77, 0xC4, 0x43, 0x5D, 0xB4, 0x63, 0xF7, 0xAE, 0x59, 0x73, 0x2B, 0x17, 0xD4, 0x94, 0x5B, 0x9E, 0xD1, 0xD5, 0xD3, 0xDC, 0xD6, 0xD9, 0xDD, 0x51, 0xDF, 0xD1, 0xBF, 0x41, 0x17, 0x07, 0x80, 0x53, 0x35, 0xFF, 0xA7, 0xBE, 0x92, 0xFE, 0x18, 0xAE, 0xFF, 0x2F, 0x8D, 0xFF, 0xF7, 0xC4, 0xBB, 0xBA, 0xBA, 0x10, 0x26, 0xB9, 0xFE, 0xBF, 0x78, 0x61, 0x7E, 0x7D, 0x61, 0xC0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x49, 0x68, 0x49, 0xD2, 0xFB, 0x10, 0xEA, 0x42, 0x6B, 0x69, 0xA9, 0x10, 0xFA, 0x42, 0x63, 0x18, 0x0C, 0x1D, 0xA1, 0x39, 0x6C, 0x0C, 0xED, 0xE7, 0x84, 0xAB, 0x27, 0xAE, 0x1F, 0x88, 0x4B, 0x6D, 0xF1, 0xB9, 0xFE, 0xD0, 0x3E, 0x3B, 0xB4, 0xC5, 0x27, 0x2A, 0x42, 0xE8, 0x0A, 0x9D, 0xA1, 0x35, 0xAE, 0xED, 0x0C, 0xBD, 0x73, 0x42, 0x7B, 0x69, 0x5D, 0x7F, 0xE8, 0x0D, 0x3D, 0xC5, 0xBA, 0x71, 0xED, 0xEC, 0xD0, 0x51, 0x5A, 0x3B, 0x10, 0xB7, 0xD2, 0x5B, 0x5A, 0x37, 0x3F, 0x6C, 0x88, 0xEB, 0x66, 0x84, 0xD0, 0x1D, 0x6B, 0x5D, 0x13, 0xD7, 0x36, 0x84, 0xCB, 0xC3, 0x65, 0x61, 0x5D, 0xFC, 0x37, 0x18, 0x97, 0x1B, 0xFC, 0x74, 0x00, 0xE0, 0x44, 0xE5, 0x7F, 0xBC, 0xB5, 0xA4, 0x45, 0x5D, 0xBA, 0xD4, 0x1A, 0x97, 0x7E, 0x2D, 0xFF, 0xE3, 0xFA, 0xAB, 0xC7, 0xAD, 0x9F, 0x90, 0xFF, 0xF1, 0xB9, 0xB6, 0x18, 0xEB, 0x13, 0xF2, 0x3F, 0xAE, 0x6B, 0x8F, 0xEB, 0x0E, 0xC9, 0xFF, 0xB8, 0xB6, 0x23, 0xAE, 0x9D, 0x90, 0xFF, 0x71, 0xDD, 0x86, 0xD8, 0x01, 0x90, 0xFF, 0x00, 0x70, 0x52, 0xAD, 0x2C, 0x8E, 0xFF, 0x8B, 0x7D, 0x80, 0x5C, 0x5A, 0xE6, 0xC2, 0xAE, 0x5C, 0xAE, 0x6A, 0xDE, 0xE2, 0x74, 0xA8, 0x9E, 0x0E, 0xFB, 0x93, 0x23, 0xAD, 0x97, 0x55, 0x6C, 0x0B, 0x7B, 0x4A, 0xF5, 0xF6, 0x84, 0xEA, 0xB4, 0xAC, 0x2E, 0xD7, 0x2B, 0xF5, 0x35, 0x92, 0x45, 0x07, 0xBA, 0x11, 0x69, 0x17, 0xA0, 0x2F, 0x76, 0x1A, 0xEA, 0xE3, 0xFD, 0x86, 0xD0, 0x12, 0xAE, 0x0C, 0x6B, 0xB2, 0xD7, 0x5A, 0x57, 0x9C, 0x89, 0x28, 0xF6, 0x46, 0x26, 0x7D, 0xAD, 0xBA, 0x43, 0xBB, 0x28, 0x59, 0xBB, 0xAB, 0x8A, 0x33, 0x15, 0xC5, 0xDE, 0xCA, 0xA4, 0xED, 0xCE, 0x99, 0xAC, 0x0B, 0xE3, 0x14, 0x00, 0xE0, 0x4D, 0x99, 0xFF, 0x53, 0x67, 0xED, 0xD1, 0xE6, 0xFF, 0x3B, 0xC2, 0x23, 0xA5, 0x7A, 0x8F, 0x74, 0xDD, 0x96, 0xAE, 0xBF, 0xAD, 0x6B, 0xD7, 0xAC, 0x24, 0x9C, 0x75, 0x49, 0x39, 0xFF, 0xCF, 0x2B, 0x4E, 0x14, 0xF4, 0xC4, 0x21, 0x7F, 0x43, 0x4C, 0xFE, 0x42, 0x2C, 0x3B, 0xC6, 0x25, 0x7F, 0x53, 0xF1, 0xF3, 0x84, 0xE2, 0x9C, 0xC2, 0xA4, 0xAF, 0x32, 0x7B, 0xFC, 0x44, 0x43, 0x28, 0xBF, 0xE2, 0xC3, 0xA5, 0x36, 0x0F, 0xD7, 0x55, 0xA5, 0x65, 0x55, 0xDD, 0xC4, 0x1E, 0xC7, 0x79, 0xF1, 0x55, 0x9A, 0x63, 0xED, 0xB4, 0xA7, 0x50, 0xEA, 0x6B, 0xF4, 0x8C, 0x7B, 0xC5, 0xAB, 0xC2, 0xDE, 0x52, 0xEB, 0xBD, 0x57, 0xDD, 0xBC, 0x22, 0x84, 0x15, 0x37, 0x5F, 0x35, 0x3A, 0x73, 0x61, 0x32, 0x77, 0x59, 0xB9, 0x75, 0xDA, 0x67, 0x48, 0x5F, 0x71, 0xCD, 0x24, 0x7B, 0xDB, 0x12, 0x1E, 0x2A, 0xF5, 0x71, 0x1E, 0x0A, 0xE9, 0x24, 0x49, 0xBC, 0x9B, 0xF8, 0xCA, 0xE7, 0x67, 0xFD, 0x8D, 0xAE, 0xF8, 0x8A, 0x1D, 0xF1, 0x56, 0x9F, 0xF5, 0x39, 0x0E, 0x6E, 0xE1, 0xB2, 0xE2, 0x67, 0x25, 0xC5, 0xF9, 0x92, 0x49, 0x8F, 0x77, 0xCE, 0xC4, 0x49, 0x94, 0x03, 0xEF, 0x52, 0x47, 0xA9, 0x55, 0xC7, 0xE1, 0xDE, 0xA5, 0x71, 0x93, 0x2C, 0x4E, 0x71, 0x00, 0x26, 0xCD, 0xFF, 0xA9, 0x13, 0x37, 0x39, 0xD2, 0x7E, 0x42, 0x56, 0xF1, 0x8A, 0xF0, 0x74, 0x29, 0x13, 0x9F, 0x2E, 0xAD, 0x0F, 0x87, 0x64, 0xE2, 0xDC, 0x2C, 0xC1, 0x7F, 0x3D, 0x0B, 0x01, 0x80, 0x93, 0x97, 0xFF, 0x53, 0x8F, 0x40, 0x8F, 0x36, 0xFF, 0xD7, 0x17, 0xAF, 0xE9, 0x2B, 0x7E, 0xAE, 0x3F, 0x69, 0xBD, 0xF9, 0x3E, 0xEC, 0x07, 0x80, 0x53, 0x20, 0xFF, 0xA7, 0xCE, 0xEB, 0xE4, 0x48, 0xFB, 0x09, 0x07, 0xF2, 0x7F, 0x7D, 0x71, 0xEE, 0x7C, 0xD9, 0xFA, 0x7D, 0x23, 0xF1, 0xA9, 0x8A, 0x91, 0x7D, 0xA3, 0x33, 0xEB, 0xAA, 0x9B, 0x2E, 0x28, 0x8F, 0xFF, 0xE7, 0x1F, 0x98, 0xD1, 0xBE, 0x3A, 0x5C, 0x1B, 0xEA, 0x8B, 0x8F, 0x0A, 0x66, 0x01, 0x00, 0xE0, 0x24, 0xE7, 0xFF, 0xD4, 0x9F, 0x25, 0x1F, 0xED, 0xF8, 0xFF, 0x1D, 0x61, 0x5F, 0x69, 0xFE, 0x7F, 0xDF, 0xBE, 0x95, 0x4B, 0x42, 0x58, 0xB2, 0x72, 0xDF, 0xAE, 0xDA, 0x99, 0x35, 0x33, 0xCE, 0x2D, 0xE7, 0xFF, 0x79, 0xA1, 0x3D, 0xB4, 0xC4, 0xFC, 0xEF, 0x89, 0xC9, 0x5F, 0x1F, 0x97, 0x3A, 0x43, 0xF7, 0xB8, 0xF4, 0xEF, 0x0D, 0x8F, 0x2E, 0x4A, 0xCB, 0x45, 0x8F, 0xEE, 0x7B, 0xBC, 0x29, 0x84, 0xA6, 0xC7, 0xF7, 0xED, 0xCA, 0xD5, 0xD4, 0x5C, 0x70, 0x79, 0xB9, 0xF5, 0xAA, 0x30, 0x14, 0x6E, 0x0D, 0x9B, 0xC3, 0x96, 0x30, 0x12, 0x06, 0xC3, 0xB6, 0xB8, 0xBC, 0x33, 0x2E, 0xDF, 0x10, 0x97, 0x4B, 0x9F, 0xB4, 0xD7, 0x87, 0xF7, 0xC6, 0x1A, 0x3B, 0xC6, 0x6D, 0xB1, 0x3B, 0xD4, 0x2F, 0x4C, 0xCB, 0x85, 0xF5, 0xBB, 0xF7, 0xD6, 0x86, 0x50, 0xBB, 0x77, 0x77, 0x71, 0x8B, 0xF5, 0xE5, 0x2D, 0xAE, 0x98, 0xB0, 0xC5, 0x9D, 0xE1, 0xC6, 0x70, 0xFB, 0x14, 0x5B, 0xEB, 0x0A, 0xF7, 0xA7, 0xBF, 0xDE, 0x10, 0xE6, 0xDC, 0x1F, 0x9E, 0xD9, 0x1C, 0xC2, 0xE6, 0x67, 0xC2, 0xAE, 0xDA, 0xEA, 0x79, 0x8B, 0x97, 0x94, 0xB7, 0xB6, 0x3C, 0xDC, 0x14, 0x5B, 0x6C, 0x0B, 0xC3, 0x71, 0x8B, 0x43, 0x61, 0x2C, 0xDE, 0x06, 0x63, 0xFB, 0x9D, 0xD9, 0xB6, 0x6E, 0x9C, 0xB0, 0xAD, 0x96, 0x50, 0x5D, 0x9B, 0x96, 0xB5, 0xD5, 0xBB, 0x77, 0xC4, 0x83, 0x5E, 0xB4, 0x63, 0xF7, 0xAE, 0x59, 0x73, 0x2B, 0x17, 0xD4, 0x94, 0xB7, 0x75, 0x7E, 0xD8, 0x1A, 0xF7, 0x69, 0xA8, 0xB8, 0x6F, 0xDB, 0xE3, 0x76, 0xEB, 0xE3, 0x6D, 0x2C, 0x6E, 0x43, 0x5F, 0x09, 0x80, 0xE3, 0x91, 0xFF, 0x53, 0x5F, 0x33, 0x7F, 0x0C, 0xD7, 0xFF, 0x97, 0xC6, 0xFF, 0x7B, 0xE2, 0x5D, 0x5D, 0xFA, 0x3B, 0x85, 0x93, 0x5F, 0xFF, 0x7F, 0xF0, 0x0A, 0xFC, 0xF4, 0xBA, 0xBA, 0x01, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x72, 0x33, 0x92, 0xCA, 0xF0, 0xF9, 0x58, 0xFE, 0xDF, 0x5F, 0xFE, 0xBB, 0x03, 0xEB, 0xAA, 0xE2, 0x2D, 0x09, 0xE1, 0x9F, 0x4A, 0x8F, 0xF2, 0xE1, 0xF5, 0xCC, 0xC4, 0x96, 0x49, 0xF6, 0x6C, 0xA6, 0xEE, 0x85, 0x9A, 0x5C, 0xAE, 0x6A, 0xDE, 0xE2, 0x29, 0x96, 0x93, 0xC9, 0x76, 0x60, 0x55, 0x5F, 0x6B, 0x7B, 0x67, 0xBE, 0xA5, 0xED, 0xD2, 0xB6, 0x4D, 0x6D, 0xF9, 0x8E, 0xE1, 0xED, 0xC3, 0xA3, 0x43, 0x63, 0x23, 0xA3, 0x93, 0xEE, 0x6B, 0x2E, 0x7B, 0xDD, 0xBC, 0x1F, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF1, 0x97, 0x54, 0x86, 0x3B, 0x63, 0xF1, 0xB1, 0xD7, 0xF7, 0x27, 0xC5, 0xC7, 0x75, 0x2F, 0xD4, 0xE4, 0x72, 0x55, 0xF3, 0x16, 0xC7, 0xC5, 0xCA, 0xF8, 0x2F, 0x5D, 0x99, 0x8C, 0xAF, 0xDF, 0xD3, 0xD7, 0xDF, 0x9C, 0x6F, 0x1D, 0xD9, 0xB6, 0x63, 0x74, 0x78, 0xE7, 0xCE, 0xE1, 0xCD, 0xF9, 0x81, 0xED, 0x5B, 0x6E, 0x18, 0xD9, 0x3C, 0x7C, 0xA4, 0x2F, 0x97, 0x2B, 0xF4, 0x35, 0x6E, 0xEA, 0xE9, 0x1A, 0xD8, 0xD8, 0x3E, 0x2D, 0x47, 0x3B, 0xEB, 0x04, 0xEF, 0xFF, 0xAC, 0xDF, 0x7A, 0x0F, 0x73, 0x21, 0x54, 0x8C, 0x7F, 0xCF, 0x57, 0x15, 0x77, 0x78, 0xA0, 0x6D, 0x43, 0x71, 0xA7, 0xB7, 0x6E, 0x19, 0xDA, 0x3E, 0x96, 0xAE, 0x2E, 0x54, 0x54, 0x3A, 0x77, 0x01, 0xF8, 0x2D, 0xE2, 0xA6, 0x32, 0xBC, 0x5A, 0x5C, 0xDA, 0x9F, 0x24, 0xDE, 0x0E, 0x00, 0x78, 0x53, 0x98, 0x11, 0xC7, 0xFF, 0x9F, 0x8D, 0xE5, 0xFC, 0xAB, 0x57, 0x27, 0x15, 0xD9, 0xBA, 0xAA, 0xD2, 0xF8, 0xB3, 0xAA, 0xF4, 0xA8, 0xA1, 0xE2, 0xF5, 0xCC, 0xBF, 0x3D, 0x27, 0x9D, 0x13, 0x28, 0x79, 0xBA, 0x3C, 0x7D, 0x50, 0xDE, 0xD0, 0xB8, 0x79, 0x83, 0xC3, 0x2D, 0x4F, 0xDA, 0xBF, 0x58, 0xD5, 0xD7, 0xDA, 0xDE, 0x99, 0x6F, 0x69, 0xBB, 0xB4, 0x6D, 0x53, 0x5B, 0xBE, 0x63, 0x78, 0xFB, 0xF0, 0xE8, 0xD0, 0xD8, 0xC8, 0xE8, 0xAF, 0x55, 0xFB, 0x50, 0x69, 0x68, 0x1C, 0xAA, 0xE3, 0xFE, 0x8E, 0xC4, 0xF2, 0xE1, 0xA7, 0x72, 0xC5, 0x71, 0xF2, 0xFC, 0x78, 0x4B, 0xF7, 0x2D, 0x7D, 0x32, 0xDD, 0x7E, 0x53, 0xB6, 0xFF, 0x61, 0x55, 0x3A, 0x64, 0xDE, 0x30, 0x3A, 0x3C, 0xDC, 0xDE, 0xDC, 0xB7, 0x63, 0xE8, 0x86, 0xF2, 0x00, 0xBF, 0x90, 0x1D, 0xE4, 0x1F, 0xCF, 0x28, 0x6D, 0x30, 0x6D, 0xB3, 0x2E, 0xDB, 0x76, 0xA9, 0x4D, 0xBA, 0x1F, 0xAD, 0x1D, 0x1B, 0xFB, 0xF2, 0x9D, 0xDB, 0x6F, 0x1C, 0x99, 0xD0, 0xE6, 0xB3, 0x33, 0x0E, 0x1E, 0xBB, 0xD1, 0x37, 0x00, 0xA7, 0xB3, 0x24, 0xE6, 0xE9, 0x57, 0x63, 0xB9, 0x76, 0x68, 0x7E, 0x31, 0xD3, 0x92, 0x74, 0x0A, 0xFB, 0xD0, 0x39, 0xE8, 0xAC, 0xDE, 0xC7, 0x63, 0x39, 0x30, 0x6B, 0x79, 0x56, 0x2F, 0x9C, 0x91, 0xD6, 0xCB, 0xFA, 0x0A, 0xA1, 0xAE, 0x34, 0x9B, 0x50, 0xE8, 0x6B, 0x1C, 0x6C, 0xEB, 0xEC, 0x6B, 0xAD, 0xEF, 0xDB, 0xD0, 0x52, 0x6C, 0x73, 0x6F, 0x5C, 0x3B, 0x18, 0xF2, 0x59, 0x9B, 0x8A, 0x99, 0x69, 0x9B, 0x19, 0x59, 0x9B, 0xB3, 0x0E, 0xB6, 0xE9, 0x68, 0xDE, 0xD8, 0x5E, 0xAC, 0x9F, 0xF6, 0x45, 0xEE, 0xF9, 0x59, 0xF9, 0x35, 0x2A, 0x6A, 0xD3, 0xFA, 0xE7, 0x67, 0xF5, 0x97, 0x1C, 0xAC, 0x3F, 0x50, 0x68, 0x6B, 0xEE, 0x6F, 0xF7, 0xE3, 0x03, 0x80, 0x63, 0x1E, 0xFF, 0x7F, 0x30, 0x96, 0x7B, 0x1E, 0x6C, 0x4A, 0xAA, 0x26, 0x8E, 0xFF, 0xB3, 0xD1, 0xEE, 0x9A, 0x03, 0xE3, 0xFF, 0x0F, 0xD5, 0x8D, 0xEB, 0x13, 0x54, 0x9F, 0x9C, 0xF1, 0x7F, 0xDD, 0xB8, 0xF1, 0x7F, 0x5D, 0x36, 0xFE, 0xBF, 0x25, 0x1B, 0xFF, 0x57, 0x4D, 0xD3, 0xF8, 0x3F, 0x3D, 0xF6, 0xF5, 0x4E, 0x1D, 0x00, 0x4E, 0xF3, 0xFC, 0xFF, 0x49, 0x2C, 0x47, 0xAF, 0x58, 0x9D, 0xCC, 0x98, 0x98, 0xFF, 0x93, 0xCE, 0xFF, 0x97, 0xFB, 0x08, 0xBF, 0x9F, 0x9C, 0x9C, 0xFC, 0x3F, 0x6B, 0x5C, 0xFE, 0x97, 0xE7, 0xFF, 0x47, 0xB3, 0xFC, 0x9F, 0x31, 0x4D, 0xF9, 0x9F, 0x1E, 0x7B, 0xB5, 0x53, 0x07, 0x80, 0xD3, 0x58, 0x3A, 0xE7, 0xFE, 0xB5, 0x50, 0x9A, 0xFF, 0xAF, 0x0E, 0x53, 0xCF, 0xFF, 0xFF, 0x34, 0x96, 0x8B, 0x1E, 0xC9, 0x67, 0xF5, 0x62, 0xC5, 0x58, 0xAF, 0x26, 0xAB, 0x37, 0xB7, 0x58, 0x2B, 0xD7, 0xD9, 0xDA, 0xD3, 0xDD, 0x50, 0x5F, 0xE8, 0xEE, 0x48, 0xEB, 0xFF, 0x38, 0xAE, 0xF9, 0x5A, 0x65, 0xB9, 0x7E, 0x45, 0x4D, 0x5A, 0x3F, 0x97, 0xD5, 0x3F, 0xBB, 0x54, 0xBF, 0xAB, 0xB3, 0xB5, 0xAD, 0xB3, 0x37, 0xDB, 0xFE, 0xC6, 0x58, 0x6E, 0xFC, 0xDE, 0xC4, 0xED, 0xD7, 0x66, 0xF5, 0xCF, 0x2D, 0xD5, 0x2F, 0x34, 0xF7, 0x36, 0x6F, 0xAC, 0xEF, 0xDB, 0xD0, 0x93, 0xD6, 0xDF, 0x19, 0xD7, 0x5C, 0xF3, 0xBF, 0x0F, 0xD4, 0x2F, 0x7E, 0xB6, 0x30, 0x3B, 0xAB, 0x7F, 0x5E, 0x56, 0xBF, 0xB3, 0x75, 0x4D, 0xBA, 0x3B, 0xC5, 0xED, 0x3F, 0x10, 0xD7, 0x5C, 0x72, 0xE5, 0xF2, 0x72, 0xFD, 0xD9, 0x69, 0xFD, 0x33, 0xB2, 0xFA, 0xF3, 0xB2, 0xFA, 0x7D, 0x8D, 0x5D, 0x3D, 0x1D, 0x3D, 0xF5, 0x6D, 0xCD, 0xFD, 0xA5, 0x7D, 0x5A, 0x14, 0xD7, 0xBE, 0xFF, 0x23, 0x07, 0x8E, 0x21, 0x97, 0xB6, 0x99, 0x93, 0xB5, 0x99, 0x5F, 0x6A, 0xD3, 0xDF, 0xDB, 0x53, 0x28, 0x1E, 0x44, 0x5A, 0xFF, 0xC5, 0xB8, 0xE6, 0xB1, 0xB3, 0x26, 0x1E, 0xF3, 0xD9, 0x59, 0xFD, 0x85, 0xA5, 0xFA, 0x03, 0x7D, 0xBD, 0xA5, 0x63, 0x06, 0x80, 0xE9, 0x1C, 0xFF, 0xDF, 0x1E, 0xCB, 0x6F, 0x6D, 0x6E, 0x4A, 0x6A, 0x26, 0x8E, 0xFF, 0xA7, 0x9C, 0xFF, 0xEF, 0xBA, 0xAD, 0xB4, 0x74, 0xE9, 0xB8, 0xF1, 0xFF, 0xAC, 0x24, 0x9C, 0x75, 0x49, 0xD3, 0xE1, 0x97, 0x8F, 0x65, 0xFC, 0x3F, 0x77, 0xDC, 0xF8, 0xBF, 0x3C, 0xFF, 0x3F, 0x96, 0x8D, 0xFF, 0x6B, 0xA6, 0x69, 0xFC, 0x9F, 0x1E, 0x7B, 0x8B, 0x53, 0x07, 0x80, 0xD3, 0x3C, 0xFF, 0xD3, 0x71, 0xFA, 0x2F, 0x9E, 0x58, 0x9D, 0xE4, 0x26, 0xE6, 0xFF, 0xA4, 0xF3, 0xFF, 0xE5, 0x0C, 0x7F, 0x57, 0x79, 0x5E, 0x60, 0x5C, 0xFE, 0x9F, 0x88, 0xF9, 0xFF, 0xB3, 0xC7, 0xE5, 0x7F, 0x79, 0xFE, 0xFF, 0xD6, 0x2C, 0xFF, 0x73, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0xCF, 0x74, 0xEA, 0x00, 0x70, 0x1A, 0x4B, 0xE7, 0xAC, 0x6F, 0x88, 0xE5, 0x7F, 0xDD, 0x39, 0xBF, 0x98, 0x69, 0xE5, 0xF9, 0xFF, 0x89, 0xD7, 0xE8, 0x97, 0xEA, 0xBD, 0x3D, 0x96, 0xCB, 0x5E, 0xCC, 0x67, 0xF5, 0x42, 0x31, 0x80, 0x67, 0x65, 0xF5, 0xCE, 0x29, 0xD6, 0x4A, 0xE7, 0xF3, 0x4B, 0x73, 0xE7, 0x00, 0xC0, 0xA9, 0x3D, 0xFE, 0x7F, 0x2D, 0x96, 0x8B, 0x3E, 0xD7, 0x94, 0xCC, 0x9A, 0x38, 0xFE, 0x9F, 0xFA, 0xFA, 0xFF, 0x6C, 0x29, 0x7F, 0x82, 0xC7, 0xFF, 0xE7, 0x8C, 0x1B, 0xFF, 0x97, 0xE7, 0xFF, 0x77, 0x65, 0xE3, 0xFF, 0x59, 0xD3, 0x34, 0xFE, 0x4F, 0x5B, 0x5D, 0x3F, 0xC3, 0xB9, 0x03, 0xC0, 0xE9, 0x9D, 0xFF, 0xCF, 0xC6, 0xF2, 0xCE, 0xA4, 0x29, 0xA9, 0x3D, 0x8A, 0xFC, 0xAF, 0xAB, 0x1A, 0xDF, 0x0B, 0x38, 0x71, 0xF9, 0x7F, 0xEE, 0x24, 0xF9, 0x7F, 0x7B, 0x96, 0xFF, 0xB5, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0x37, 0x3B, 0x75, 0x00, 0x38, 0xCD, 0xF3, 0xFF, 0x97, 0x69, 0x06, 0x8E, 0x35, 0x25, 0xB3, 0x8F, 0x22, 0xFF, 0xAF, 0xBA, 0x79, 0x45, 0xB1, 0xFC, 0x66, 0xF9, 0x17, 0x02, 0xEB, 0x9E, 0xAF, 0x99, 0xB9, 0x30, 0x99, 0xBB, 0xAC, 0xEA, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0xE7, 0x4D, 0x92, 0xFF, 0x77, 0x64, 0xF9, 0x3F, 0x7B, 0x9A, 0xF2, 0x3F, 0x3D, 0xF6, 0x5B, 0x9C, 0x3A, 0x00, 0x9C, 0xE6, 0xF9, 0x7F, 0x57, 0x2C, 0xEF, 0x7D, 0xAC, 0x29, 0x39, 0xE3, 0x28, 0xF2, 0xBF, 0x3C, 0x31, 0x5F, 0x79, 0x82, 0xC7, 0xFF, 0xF3, 0x26, 0xC9, 0xFF, 0x0F, 0x64, 0xF9, 0x7F, 0xC6, 0x34, 0xE5, 0x7F, 0x7A, 0xEC, 0xBF, 0x6B, 0xFE, 0x1F, 0x80, 0xD3, 0x3C, 0xFF, 0xD3, 0xEC, 0x9B, 0xF5, 0xD4, 0xEA, 0x64, 0xCE, 0xC4, 0xFC, 0x9F, 0xF4, 0xFA, 0xFF, 0xF2, 0x77, 0x04, 0xFC, 0xCB, 0xAC, 0x3C, 0xD1, 0xF3, 0xFF, 0xF3, 0xC7, 0xE5, 0x7F, 0xF9, 0xFA, 0xFF, 0x0F, 0x66, 0xF9, 0x3F, 0x67, 0x9A, 0xF2, 0x3F, 0x3D, 0xF6, 0x33, 0x9D, 0x3A, 0x00, 0x9C, 0xC6, 0xD2, 0xEB, 0xFA, 0xB7, 0x84, 0xD2, 0xF5, 0xFF, 0x67, 0x86, 0xA9, 0xAF, 0xFF, 0xFF, 0x7E, 0x2C, 0x3F, 0xB8, 0x62, 0x79, 0x56, 0xAF, 0xA2, 0xF8, 0xF7, 0xFF, 0xEB, 0xB2, 0x7A, 0x0B, 0x8A, 0xB5, 0x72, 0xDD, 0x85, 0x6B, 0x7A, 0x1B, 0x2E, 0xBF, 0x6C, 0xDD, 0xBA, 0xC1, 0x86, 0x06, 0x6F, 0x2E, 0x00, 0x9C, 0xC2, 0xE3, 0xFF, 0xFA, 0x58, 0xFE, 0xA7, 0xD5, 0xAB, 0x93, 0xBA, 0x23, 0x18, 0xFF, 0x27, 0x27, 0x79, 0xFC, 0xBF, 0x60, 0x92, 0xF1, 0xFF, 0x9D, 0xD9, 0xF8, 0xBF, 0x6E, 0x1A, 0xC7, 0xFF, 0x67, 0x39, 0x75, 0x00, 0x38, 0xCD, 0xC7, 0xFF, 0xE9, 0x75, 0x74, 0xB5, 0xFF, 0x6D, 0x7E, 0x31, 0xD3, 0xCA, 0xE3, 0xFF, 0x89, 0x7F, 0xE3, 0xB6, 0x54, 0xEF, 0x9E, 0x58, 0x3E, 0xFE, 0xC0, 0xF2, 0xAC, 0x5E, 0x28, 0x7E, 0x37, 0xDF, 0xDC, 0xAC, 0xDE, 0xF9, 0xA5, 0xF1, 0x7F, 0xFA, 0xB7, 0x70, 0xAF, 0xBE, 0xB6, 0xBE, 0xBF, 0xB7, 0xE0, 0xAD, 0x05, 0x80, 0x53, 0x7A, 0xFC, 0x9F, 0xFE, 0x5D, 0xFA, 0xF7, 0xDD, 0xD0, 0x94, 0xCC, 0x9D, 0x38, 0xFE, 0x9F, 0xF2, 0xFA, 0xBF, 0x7D, 0x23, 0xA5, 0x41, 0x71, 0xF7, 0x81, 0xF1, 0xFF, 0xF3, 0x35, 0x33, 0xEB, 0xAA, 0x9B, 0x2E, 0xF8, 0xDD, 0xC3, 0x2F, 0x1F, 0xCB, 0xF8, 0xFF, 0xFC, 0x71, 0xE3, 0xFF, 0xF2, 0xF5, 0x7F, 0x77, 0x67, 0xE3, 0xFF, 0xB9, 0xD3, 0x34, 0xFE, 0x4F, 0x8F, 0x7D, 0xDF, 0x12, 0xE7, 0x0E, 0x00, 0xA7, 0x77, 0xFE, 0xBF, 0x3B, 0x96, 0x4F, 0x5D, 0xB3, 0x3A, 0x39, 0x7B, 0x62, 0xFE, 0x4F, 0x39, 0xFF, 0xBF, 0xEE, 0x24, 0x7D, 0xFF, 0xDF, 0xC2, 0x71, 0xF9, 0x5F, 0x9E, 0xFF, 0xDF, 0x9D, 0xE5, 0xFF, 0xD9, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0x9F, 0xE3, 0xD4, 0x01, 0xE0, 0x34, 0x96, 0xCE, 0xEB, 0x6F, 0x0F, 0xA5, 0xEB, 0xFF, 0xCE, 0x09, 0x53, 0x5F, 0xFF, 0x97, 0xFE, 0xBD, 0x9D, 0x9D, 0x83, 0xF9, 0xAC, 0x5E, 0xE9, 0xFB, 0xF9, 0xCE, 0xCD, 0xEA, 0x2D, 0x2A, 0xD6, 0xCA, 0xB5, 0xB7, 0xF4, 0xF4, 0xF4, 0xD7, 0xB7, 0x74, 0x76, 0xA7, 0xF5, 0xEF, 0x8B, 0x6B, 0x7E, 0x70, 0xCB, 0xEA, 0x72, 0xFD, 0x73, 0xD2, 0xFA, 0xE7, 0x65, 0xF5, 0x17, 0x97, 0xEA, 0x0F, 0xDD, 0xBA, 0x79, 0xCB, 0xC8, 0xE0, 0xB6, 0x5B, 0x77, 0x6E, 0xB9, 0x61, 0xB0, 0xD0, 0xD7, 0x58, 0xFF, 0xDE, 0xA1, 0x1D, 0xA5, 0xD7, 0x1A, 0x8A, 0xCF, 0xFE, 0x75, 0xFF, 0xCA, 0x72, 0xDB, 0xB9, 0x69, 0xDB, 0x79, 0x59, 0xDB, 0x0B, 0xC6, 0xB7, 0xDD, 0x79, 0xE3, 0xED, 0xE5, 0x96, 0x69, 0xBB, 0x57, 0xE2, 0x33, 0x1F, 0xBE, 0xEC, 0x40, 0xBB, 0xB3, 0xD2, 0x76, 0xF3, 0xB3, 0x76, 0x17, 0x96, 0xDA, 0xDD, 0x34, 0xB4, 0x6D, 0x78, 0xF3, 0xD0, 0xD8, 0xD0, 0xE0, 0x8E, 0x9D, 0xB1, 0xD9, 0x8D, 0x3B, 0x8A, 0xAF, 0x77, 0x4D, 0x3A, 0x07, 0xF2, 0x95, 0xE5, 0xE5, 0x76, 0xC5, 0xEF, 0x06, 0x5C, 0x90, 0xB5, 0xCB, 0x97, 0xDA, 0x6D, 0x1D, 0x19, 0xDA, 0xBC, 0x65, 0xFB, 0x4D, 0xF5, 0x37, 0x8D, 0xDD, 0xE8, 0xBC, 0x01, 0xE0, 0xF4, 0x1F, 0xFF, 0x3F, 0x94, 0x66, 0xE3, 0x25, 0x4D, 0xC9, 0xB9, 0x13, 0xC7, 0xFF, 0x53, 0xCF, 0xFF, 0xAF, 0x2C, 0x4D, 0x80, 0xAF, 0xA8, 0x3A, 0x38, 0xFE, 0xAF, 0x9D, 0x59, 0x33, 0xE3, 0xDC, 0xC2, 0xE1, 0x97, 0x8F, 0x65, 0xFC, 0xBF, 0x68, 0xDC, 0xF8, 0xBF, 0x3C, 0xFF, 0x7F, 0x4F, 0x36, 0xFE, 0x3F, 0x77, 0x9A, 0xC6, 0xFF, 0xE9, 0xB1, 0xEF, 0xF6, 0xFB, 0xFF, 0x00, 0x9C, 0xE6, 0xF9, 0xBF, 0x35, 0x96, 0xFF, 0x98, 0x6F, 0x4A, 0xCE, 0x3B, 0x9A, 0xFC, 0x7F, 0xBC, 0xA9, 0x58, 0x3E, 0x50, 0x7D, 0x30, 0xFF, 0x73, 0x35, 0x35, 0x17, 0x5C, 0xBE, 0xFA, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0x8B, 0x27, 0xC9, 0xFF, 0x3F, 0xC8, 0xF2, 0xFF, 0xBC, 0xE9, 0xCA, 0xFF, 0x78, 0xEC, 0x9D, 0x0B, 0x9D, 0x3B, 0x00, 0x9C, 0xDE, 0xF9, 0xFF, 0x58, 0x9A, 0x81, 0x17, 0x36, 0x25, 0xF3, 0x8E, 0x22, 0xFF, 0x77, 0xEF, 0x2D, 0x7D, 0x5B, 0xC0, 0x07, 0x93, 0x89, 0xF9, 0x5F, 0xBF, 0xEC, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0x17, 0x4C, 0x92, 0xFF, 0x1F, 0xCA, 0xF2, 0x7F, 0xDE, 0x34, 0xE5, 0x7F, 0x7A, 0xEC, 0xDF, 0x5C, 0xE0, 0xDC, 0x01, 0xE0, 0xF4, 0xCE, 0xFF, 0x3F, 0x8A, 0xE5, 0x63, 0x9F, 0x68, 0x4A, 0xE6, 0x1F, 0x45, 0xFE, 0x87, 0x67, 0x36, 0x17, 0x8B, 0x07, 0x67, 0x1F, 0xCC, 0xFF, 0xDA, 0xEA, 0x79, 0x8B, 0x97, 0x34, 0x1D, 0x7E, 0xF9, 0x58, 0xF2, 0xFF, 0xC2, 0x49, 0xF2, 0xFF, 0xC3, 0x59, 0xFE, 0xCF, 0x9F, 0xA6, 0xFC, 0x4F, 0x8F, 0xFD, 0x6D, 0x67, 0x38, 0x77, 0x00, 0x38, 0xBD, 0xF3, 0xFF, 0xF7, 0x62, 0x79, 0xE6, 0x3F, 0x36, 0x25, 0x0B, 0x8E, 0x66, 0xFC, 0xBF, 0xA3, 0xF4, 0xC9, 0xFC, 0x27, 0x2B, 0x0F, 0xE6, 0xFF, 0xAC, 0xB9, 0x95, 0x0B, 0x6A, 0x9A, 0x0F, 0xBF, 0x7C, 0x2C, 0xF9, 0x9F, 0x9F, 0x24, 0xFF, 0x3F, 0x92, 0xE5, 0xFF, 0x82, 0xE9, 0x1A, 0xFF, 0xC7, 0x63, 0xFF, 0xE2, 0x4C, 0xE7, 0x0E, 0x00, 0xA7, 0x77, 0xFE, 0x3F, 0x15, 0xCB, 0x25, 0x9D, 0xAB, 0x93, 0xF3, 0x27, 0xE6, 0xFF, 0x29, 0xF1, 0xF7, 0xFF, 0x96, 0x8C, 0xCB, 0xFF, 0xF2, 0xEF, 0xFF, 0xDD, 0x9B, 0xE5, 0xFF, 0xF9, 0x61, 0xFA, 0xFE, 0xFE, 0x9F, 0x8F, 0xFF, 0x01, 0x38, 0x9D, 0xA5, 0xBF, 0xFB, 0xF6, 0x57, 0xB1, 0x5C, 0x3B, 0x34, 0xBF, 0x98, 0x69, 0xE5, 0xDF, 0xFF, 0xAB, 0x38, 0x24, 0xAF, 0x93, 0xEC, 0xBA, 0xBB, 0xDE, 0x97, 0x96, 0x67, 0xF5, 0x42, 0xF1, 0xEF, 0xFF, 0x2F, 0xCA, 0xEA, 0x2D, 0x2D, 0xD6, 0xCA, 0x15, 0xFA, 0x1A, 0x07, 0x0A, 0x6D, 0xCD, 0xFD, 0xF5, 0x85, 0x01, 0x7F, 0x01, 0x10, 0x00, 0x4E, 0xE5, 0xF1, 0xFF, 0xDE, 0x58, 0xDE, 0xF9, 0x4F, 0x4D, 0xC9, 0xA2, 0x89, 0xE3, 0xFF, 0xA9, 0x3F, 0xFF, 0x2F, 0x4D, 0xC7, 0x87, 0x03, 0xDF, 0x08, 0x78, 0x82, 0xC6, 0xFF, 0x4B, 0xC7, 0x8D, 0xFF, 0xCB, 0xF3, 0xFF, 0x1F, 0xCB, 0xC6, 0xFF, 0x8B, 0xA6, 0x69, 0xFC, 0x9F, 0xEE, 0xCA, 0xFA, 0xA5, 0xCE, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x1D, 0xFF, 0x1F, 0xA0, 0x0B, 0xDC, 0xE8, 0x00, 0x00, 0x0D, 0x00 };
            FooterLength = 36;
            Footer = new byte[] { 0x1F, 0x8B, 0x08, 0x08, 0xFF, 0x0C, 0x3F, 0x65, 0x02, 0x00, 0x30, 0x00, 0x63, 0x18, 0x05, 0xA3, 0x60, 0x14, 0x8C, 0x82, 0x51, 0x30, 0x0A, 0x46, 0xC1, 0x88, 0x03, 0x00, 0x9E, 0xBA, 0xE8, 0xF1, 0x00, 0x08, 0x00, 0x00 };
            RegionCount = 3;
            RegionHashes = new byte[RegionCount][];
            for (int i = 0; i < RegionCount; i++)
                RegionHashes[i] = NullMD5;
            FileCount = 1;
            FileKeys = new ulong[FileCount];
            for (int i = 0; i < FileCount; i++)
                FileKeys[i] = (ulong)(i * 16);
            FileHashes = new byte[FileCount][];
            for (int i = 0; i < FileCount; i++)
                FileHashes[i] = NullMD5;
        }

        /// <summary>
        /// Read IRD data from file, store fields into class
        /// </summary>
        /// <param name="irdPath">Path to IRD file to read data from</param>
        /// <exception cref="ArgumentException"></exception>
        public void Read(string irdPath)
        {
            // TODO: Validate irdPath
            if (irdPath == null || !File.Exists(irdPath))
                throw new ArgumentException("IRD File Path invalid", nameof(irdPath));

            // TODO: Implement reading IRD file data into fields (remove these intial values)
            TitleID = "\0\0\0\0\0\0\0\0\0";
            Title = "\0";
            SystemVersion = "\0\0\0\0";
            GameVersion = "\0\0\0\0\0";
            AppVersion = "\0\0\0\0\0";
            HeaderLength = 6052;
            Header = new byte[] { 0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xED, 0xDD, 0x0F, 0x74, 0x5D, 0x75, 0x81, 0x27, 0xF0, 0xDF, 0x4D, 0xD2, 0xE4, 0xB5, 0x29, 0x25, 0x94, 0x3F, 0x6D, 0x69, 0x0B, 0xAF, 0x7F, 0x28, 0xB5, 0x96, 0x90, 0x36, 0x11, 0x2A, 0x30, 0x4E, 0xF3, 0xAF, 0x21, 0x7B, 0xD2, 0xE4, 0x99, 0x3F, 0x45, 0x64, 0x9D, 0x10, 0x69, 0xC0, 0x62, 0xDB, 0x94, 0x34, 0x50, 0xD0, 0x01, 0x7A, 0x18, 0x15, 0x5D, 0x67, 0x75, 0x38, 0x8A, 0x88, 0xC7, 0x73, 0x28, 0xAC, 0xEB, 0x59, 0xCE, 0xC1, 0x75, 0x50, 0xD6, 0x3D, 0x70, 0x76, 0x56, 0x98, 0xD9, 0x19, 0x9C, 0x9D, 0x19, 0xB5, 0xAE, 0xEE, 0xE0, 0x71, 0x96, 0xAD, 0xE2, 0x8E, 0xE8, 0x11, 0x4E, 0xD7, 0x9D, 0xD5, 0xD9, 0x19, 0xFE, 0xEC, 0xEF, 0xBE, 0x77, 0x5F, 0x9B, 0xD4, 0x34, 0xB6, 0xB5, 0x6D, 0x5A, 0xF8, 0x7C, 0xEA, 0x7B, 0xBF, 0xFB, 0xEE, 0xFB, 0xFD, 0xEE, 0xBB, 0xF7, 0xE5, 0xE2, 0xF7, 0xF7, 0xFB, 0xBD, 0x9B, 0xBC, 0x10, 0x42, 0x45, 0x38, 0xA0, 0xFA, 0xEB, 0x21, 0x2C, 0xDB, 0x13, 0x2A, 0x96, 0x7D, 0x3D, 0x00, 0x00, 0x6F, 0x58, 0x85, 0xAD, 0x43, 0x77, 0xF4, 0x8D, 0x0D, 0x8D, 0x6D, 0x19, 0xD9, 0xDE, 0x98, 0x3E, 0x6E, 0xE9, 0x1A, 0xE8, 0xBB, 0xA4, 0x71, 0xCD, 0xDB, 0x1A, 0xDE, 0x96, 0x9F, 0xD4, 0xA1, 0xED, 0xBF, 0x9F, 0xFB, 0xCC, 0xD9, 0x6F, 0x9F, 0x7F, 0xE5, 0x27, 0x7F, 0xF0, 0xFE, 0x2F, 0xBC, 0xFB, 0xCB, 0xEB, 0x5E, 0xF9, 0x4A, 0xF2, 0xB9, 0xEF, 0x84, 0x1F, 0xFE, 0xEC, 0x5F, 0x7D, 0xA4, 0xF3, 0x7F, 0x3D, 0xFB, 0xA9, 0xD9, 0x2B, 0xBA, 0xAE, 0xF9, 0xCB, 0x2F, 0xFE, 0xEC, 0xD2, 0x81, 0x67, 0xFF, 0xB9, 0xF1, 0xA7, 0xF7, 0x5D, 0x77, 0x4B, 0xCB, 0x97, 0xFE, 0x74, 0xCD, 0x5F, 0x3F, 0x77, 0xE1, 0xD8, 0x8F, 0x3E, 0xF3, 0x87, 0x3F, 0xF9, 0xF4, 0xB2, 0xD7, 0xBE, 0xFF, 0xAB, 0x8B, 0xBE, 0x7B, 0xD7, 0xAE, 0x86, 0x86, 0x6F, 0x5E, 0xFD, 0xB7, 0x8F, 0xAD, 0xFA, 0xC2, 0x9A, 0x7D, 0xDF, 0x79, 0x66, 0xC9, 0xFD, 0x9F, 0xFE, 0xC2, 0x25, 0x8F, 0xBD, 0xB8, 0xE6, 0xC9, 0x27, 0x3E, 0x77, 0xDF, 0x2D, 0xDB, 0xB6, 0xAE, 0x1B, 0xFC, 0xAB, 0xE4, 0xD5, 0xDF, 0xF9, 0xD4, 0xD7, 0x3F, 0xFD, 0xF5, 0xDA, 0x8B, 0xEF, 0x6C, 0xB9, 0xA8, 0xEF, 0xD3, 0xD7, 0xCF, 0x5D, 0xBE, 0x30, 0x77, 0xFE, 0xAA, 0x19, 0x3F, 0x7A, 0x7E, 0xCE, 0xB7, 0xAE, 0x69, 0x7A, 0xBC, 0xE3, 0xF1, 0xBD, 0x5F, 0xFC, 0xD8, 0xA3, 0x5F, 0x3A, 0xFB, 0x17, 0x4F, 0xDE, 0xFC, 0x83, 0xBF, 0xB8, 0xF2, 0xF9, 0x1F, 0xCF, 0x5A, 0xF0, 0x0F, 0x2F, 0x3D, 0xF1, 0xDC, 0x87, 0xEF, 0x1F, 0xEA, 0xFF, 0xF9, 0xEF, 0x7F, 0xEE, 0xEE, 0x7C, 0xE5, 0x07, 0xEE, 0x6A, 0x3E, 0xFB, 0xE5, 0x27, 0xCE, 0x78, 0xB5, 0xF6, 0xA5, 0x3B, 0xE6, 0xDE, 0x77, 0xC3, 0x3D, 0x1B, 0xD6, 0xBC, 0xF3, 0x27, 0x7F, 0xBB, 0x7F, 0xD1, 0x8E, 0x47, 0x67, 0xBF, 0xF8, 0x8D, 0xBF, 0xBF, 0xF9, 0x03, 0x2F, 0x3E, 0x7A, 0xEF, 0x75, 0xCF, 0x5D, 0xF9, 0xEA, 0xDD, 0x3B, 0x3F, 0xFF, 0x6F, 0x5E, 0xF9, 0x9B, 0xC7, 0x76, 0xFC, 0xBC, 0x63, 0xE3, 0x73, 0xFF, 0xE3, 0xAB, 0xF3, 0x3E, 0xF9, 0xEC, 0x0B, 0xBB, 0x5E, 0xFE, 0xD7, 0x9F, 0xD9, 0xFA, 0xE5, 0xAB, 0xAE, 0xFA, 0xE3, 0x57, 0x7E, 0xF5, 0xDF, 0x2F, 0x3C, 0xFB, 0xEF, 0x9F, 0xFC, 0x8B, 0xB5, 0xEF, 0x79, 0xE7, 0x8B, 0x8D, 0x03, 0x77, 0x2F, 0xFA, 0xDA, 0x7D, 0x4D, 0x7B, 0x06, 0x9F, 0xFA, 0x87, 0x47, 0x1E, 0xD8, 0xFF, 0x8B, 0x2D, 0xEF, 0x5D, 0xFE, 0xAD, 0xF7, 0x7D, 0xF7, 0x81, 0xFF, 0xF8, 0xD6, 0xEE, 0x8F, 0x7E, 0x6A, 0xEC, 0xF1, 0xEB, 0xDF, 0xF3, 0xBD, 0xD6, 0xF7, 0xF6, 0x5C, 0xF1, 0xE0, 0xFB, 0x5E, 0x7B, 0xFC, 0xB3, 0xDF, 0xB9, 0xFB, 0xCA, 0x07, 0x57, 0x2E, 0x3B, 0xE3, 0x9A, 0x57, 0x7A, 0xBE, 0xF1, 0x77, 0x9F, 0xB8, 0xBA, 0x6F, 0xC6, 0xCB, 0x7B, 0x67, 0xDE, 0xFA, 0xAB, 0x3B, 0x9F, 0x7D, 0xC7, 0x5D, 0xF7, 0x7C, 0xEB, 0xA1, 0x85, 0x7F, 0xB3, 0xF5, 0xF9, 0xEA, 0x95, 0xEF, 0x7E, 0x71, 0xC3, 0x9C, 0x6F, 0x74, 0xFF, 0xF0, 0xA5, 0xDF, 0xF9, 0xEA, 0x47, 0x9F, 0xFB, 0x7F, 0xFB, 0xEF, 0xB8, 0xF7, 0xFD, 0x15, 0xB7, 0x3F, 0x71, 0xFB, 0xA3, 0x37, 0xFD, 0xEA, 0x86, 0x3F, 0x7B, 0xE2, 0xE3, 0xAF, 0xFE, 0xE4, 0x0F, 0x3F, 0xBE, 0xE0, 0x3F, 0xE7, 0x1F, 0xF9, 0xBD, 0x5F, 0x56, 0x6E, 0xFB, 0xD2, 0x5D, 0xFF, 0xE2, 0x4F, 0xAE, 0xBB, 0xEE, 0x7B, 0x9D, 0x3F, 0xFA, 0xE7, 0x81, 0xEE, 0xD7, 0x3B, 0xDE, 0x37, 0xFB, 0xCB, 0xFF, 0x7E, 0xF5, 0x15, 0xAB, 0x5E, 0xBE, 0x62, 0xE4, 0xDC, 0xFF, 0x72, 0xE1, 0xFB, 0xEF, 0x7F, 0x29, 0xBF, 0xB7, 0xE1, 0xA3, 0x6F, 0x79, 0x6D, 0xCF, 0xB7, 0x5B, 0xBE, 0x7B, 0xD3, 0x45, 0x33, 0x6F, 0x7B, 0xD7, 0x5F, 0xAE, 0xBD, 0xF8, 0xB1, 0xD1, 0x1F, 0xFE, 0xDD, 0x3B, 0x17, 0x7C, 0x7B, 0xCE, 0xDD, 0x4F, 0x7C, 0x78, 0xCB, 0xBB, 0x7F, 0xFA, 0xA7, 0x7F, 0x94, 0xFF, 0x9F, 0x9F, 0xF8, 0x93, 0x8E, 0x6F, 0xBF, 0xEB, 0x1B, 0xF3, 0x9F, 0xBC, 0xF2, 0xC7, 0x63, 0xDD, 0xAF, 0xBC, 0x76, 0xE6, 0xC5, 0x1F, 0x7B, 0x65, 0xE6, 0x4F, 0xF3, 0x57, 0x5C, 0x79, 0xC5, 0x7F, 0xF8, 0xEA, 0x1D, 0x8D, 0x4D, 0x1F, 0xDF, 0x50, 0xBF, 0xE8, 0xE7, 0xDF, 0xF3, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE4, 0x92, 0xD6, 0xB6, 0x86, 0x86, 0x35, 0x49, 0xC8, 0xFF, 0x06, 0x85, 0xBE, 0xC6, 0x4D, 0x3D, 0x5D, 0x03, 0x1B, 0xDB, 0xF3, 0x53, 0x7F, 0x2F, 0xF0, 0xD3, 0xCB, 0x2A, 0x42, 0xA8, 0x58, 0xF6, 0xF4, 0x6F, 0x7C, 0xDD, 0xF8, 0xBF, 0xF4, 0x16, 0x72, 0xB9, 0xB0, 0xB5, 0xB4, 0x6A, 0x6B, 0x3E, 0x39, 0xF0, 0xEC, 0x92, 0xF4, 0x7E, 0x69, 0x58, 0x5A, 0x5C, 0x93, 0x2C, 0x0D, 0xB9, 0xB4, 0xCC, 0x85, 0x5D, 0xB9, 0x5C, 0xD5, 0xBC, 0xC5, 0xA1, 0xA2, 0xDC, 0xFE, 0x37, 0xED, 0x15, 0x1C, 0x47, 0x6B, 0x1B, 0xD6, 0xBC, 0xBD, 0x61, 0x5D, 0xFC, 0xD7, 0xB4, 0xB6, 0x71, 0xED, 0xDB, 0x1B, 0x1A, 0x42, 0xC3, 0x21, 0x8E, 0x60, 0x45, 0xE2, 0xFF, 0x73, 0x80, 0x53, 0x43, 0x45, 0x96, 0xFF, 0xBF, 0x51, 0x21, 0xF4, 0x85, 0xC6, 0xB0, 0x29, 0xF4, 0x84, 0xAE, 0x30, 0x10, 0x36, 0x86, 0xF6, 0xC9, 0xAB, 0x95, 0xF3, 0xFF, 0xA2, 0x4B, 0xD7, 0x1F, 0x71, 0xFE, 0x7F, 0xBE, 0xB4, 0xEA, 0xF3, 0xEB, 0x0F, 0xE6, 0x7F, 0x73, 0x29, 0xFF, 0x5B, 0x4A, 0xF9, 0xDF, 0x72, 0xB8, 0xFC, 0x3F, 0xD2, 0xBD, 0x82, 0xE3, 0x40, 0xFE, 0x03, 0x6F, 0x20, 0xAF, 0x1F, 0x69, 0xFE, 0x03, 0x00, 0x6F, 0x1C, 0x2D, 0xED, 0xCD, 0xF2, 0x1F, 0x00, 0xDE, 0x64, 0xBA, 0xFB, 0x7A, 0x1B, 0x1A, 0xE5, 0x3F, 0x00, 0xBC, 0xA9, 0xF4, 0x1B, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF1, 0x96, 0x84, 0xCA, 0x30, 0x18, 0xCB, 0xE7, 0x46, 0xF7, 0x27, 0xF9, 0x71, 0xEB, 0x73, 0x85, 0xBE, 0xC6, 0x4D, 0x3D, 0x5D, 0x03, 0x1B, 0x27, 0xFF, 0x46, 0xDD, 0x59, 0x49, 0x6C, 0x59, 0x11, 0xDB, 0x26, 0xC5, 0x6D, 0xC4, 0xFA, 0x4D, 0x1B, 0x1A, 0xD6, 0xAD, 0x5D, 0xDB, 0xDE, 0x5E, 0xFE, 0xA2, 0xD3, 0xA9, 0xDB, 0x1F, 0x6F, 0xE7, 0x87, 0x9E, 0xBE, 0xFE, 0xE6, 0x7C, 0xEB, 0xC8, 0xB6, 0x1D, 0xA3, 0xC3, 0x3B, 0x77, 0x0E, 0x6F, 0xCE, 0x0F, 0x6C, 0xDF, 0x72, 0xC3, 0xC8, 0xE6, 0xE1, 0x23, 0xDE, 0xC2, 0x6F, 0xDB, 0xFE, 0x50, 0xAB, 0x0A, 0x5D, 0xCD, 0xD7, 0xC6, 0x6D, 0xF6, 0x77, 0xF6, 0x74, 0xAF, 0xEC, 0x7D, 0x4B, 0xE3, 0xA1, 0xCF, 0xD7, 0xBD, 0x50, 0x53, 0xFA, 0x32, 0xE3, 0xB4, 0x6E, 0x5F, 0x6B, 0x7B, 0x67, 0xBE, 0xA5, 0xED, 0xD2, 0xB6, 0x4D, 0x6D, 0xF9, 0x8E, 0xE1, 0xED, 0xC3, 0xA3, 0x43, 0x63, 0x23, 0xA3, 0x4E, 0x4E, 0x00, 0x4E, 0x98, 0xAA, 0x98, 0xE1, 0xF5, 0xB1, 0x2C, 0xFC, 0xF9, 0xFE, 0x64, 0x49, 0x96, 0xE5, 0x61, 0xD5, 0x40, 0xDB, 0x86, 0x7C, 0xD7, 0xA6, 0x7C, 0xE7, 0xF6, 0x1B, 0x47, 0xC6, 0xD5, 0x2D, 0x54, 0x1C, 0x9F, 0xAC, 0xCC, 0x9D, 0xDC, 0xBE, 0xC1, 0xAF, 0xF5, 0x5D, 0x4E, 0xEA, 0xAB, 0xC9, 0x76, 0x00, 0x4E, 0x41, 0x33, 0x62, 0xFE, 0xFF, 0x59, 0x2C, 0x1F, 0xA9, 0xDE, 0x9F, 0x2C, 0x8D, 0x65, 0x45, 0xB9, 0x0F, 0xF0, 0xD6, 0xE2, 0x17, 0x03, 0x9E, 0xC2, 0xF3, 0x16, 0x21, 0x5C, 0x1F, 0xEF, 0x06, 0x97, 0x56, 0xC8, 0x58, 0x00, 0x38, 0x4A, 0xD5, 0x31, 0xFF, 0x1F, 0x8C, 0xE5, 0xAD, 0x33, 0x5F, 0x4E, 0x96, 0xC5, 0xB2, 0xF2, 0x8D, 0x30, 0xBE, 0xCF, 0xA5, 0xE3, 0xEE, 0xE2, 0x41, 0xA4, 0x13, 0x19, 0xE9, 0x81, 0x6C, 0xDD, 0x32, 0xB4, 0x7D, 0xAC, 0x34, 0x87, 0x51, 0x59, 0xAA, 0x55, 0x77, 0xB0, 0x1F, 0x91, 0xDA, 0x90, 0xF5, 0x7D, 0x4E, 0xF9, 0xBE, 0x44, 0xDC, 0xEF, 0xEB, 0xD3, 0xFD, 0xAE, 0x4E, 0xF7, 0xBC, 0x62, 0x7D, 0xC8, 0x66, 0x6B, 0x36, 0x0E, 0x8F, 0x0D, 0x6D, 0x1E, 0x1A, 0x1B, 0xCA, 0x17, 0x86, 0x46, 0xC7, 0xB6, 0x8C, 0x6D, 0x19, 0xD9, 0x5E, 0x9E, 0xAD, 0x29, 0x1F, 0xE1, 0xFA, 0xD8, 0x53, 0x7A, 0x3D, 0xCA, 0xC7, 0xE5, 0xBC, 0x13, 0x1F, 0xE0, 0x4D, 0xAE, 0x26, 0x26, 0xFE, 0x57, 0x62, 0xB9, 0xED, 0xCC, 0x5C, 0x58, 0x1E, 0xD2, 0xCF, 0x03, 0x00, 0x80, 0x37, 0xBA, 0x5C, 0xCC, 0xFF, 0x25, 0xC5, 0xA5, 0xFD, 0xC9, 0x45, 0xDE, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x93, 0x24, 0x54, 0x86, 0xBB, 0x63, 0xF9, 0xDC, 0xE8, 0xFE, 0x64, 0xFD, 0xB8, 0xF5, 0xB9, 0x42, 0x5F, 0xE3, 0xA6, 0x9E, 0xAE, 0x81, 0x8D, 0xED, 0x93, 0x36, 0x9B, 0x95, 0xC4, 0x96, 0x15, 0xB1, 0x6D, 0x52, 0xDC, 0x46, 0xAC, 0xDF, 0xB4, 0xA1, 0x61, 0xDD, 0xDA, 0xB5, 0xED, 0xED, 0x0D, 0x99, 0xA9, 0xDB, 0x1F, 0x6F, 0xE7, 0x87, 0x9E, 0xBE, 0xFE, 0xE6, 0x7C, 0xEB, 0xC8, 0xB6, 0x1D, 0xA3, 0xC3, 0x3B, 0x77, 0x0E, 0x6F, 0xCE, 0x0F, 0x6C, 0xDF, 0x72, 0xC3, 0xC8, 0xE6, 0xE1, 0x23, 0xDE, 0xC2, 0x6F, 0xDB, 0xFE, 0x50, 0xAB, 0x0A, 0x5D, 0xCD, 0xD7, 0xC6, 0x6D, 0xF6, 0x77, 0xF6, 0x74, 0xAF, 0xEC, 0x7D, 0x4B, 0xE3, 0xA1, 0xCF, 0xD7, 0xBD, 0x50, 0x93, 0xCB, 0x55, 0xCD, 0x5B, 0x5C, 0xAC, 0xDB, 0xD7, 0xDA, 0xDE, 0x99, 0x6F, 0x69, 0xBB, 0xB4, 0x6D, 0x53, 0x5B, 0xBE, 0x63, 0x78, 0xFB, 0xF0, 0xE8, 0xD0, 0xD8, 0xC8, 0xA8, 0x93, 0x13, 0x80, 0x13, 0xA6, 0x2A, 0x66, 0x78, 0x77, 0x2C, 0x0B, 0x7F, 0xBE, 0x3F, 0x69, 0xCE, 0xB2, 0x3C, 0xAC, 0x1A, 0x68, 0xDB, 0x90, 0xEF, 0xDA, 0x94, 0xEF, 0xDC, 0x7E, 0xE3, 0xC8, 0xB8, 0xBA, 0x85, 0x8A, 0xE3, 0x93, 0x95, 0xB9, 0x93, 0xDB, 0x37, 0xF8, 0xB5, 0xBE, 0xCB, 0x49, 0x7D, 0x35, 0xD9, 0x0E, 0xC0, 0x29, 0x68, 0x46, 0xCC, 0xFF, 0x17, 0x62, 0xF9, 0x48, 0xF5, 0xFE, 0xA4, 0x25, 0x96, 0x15, 0xE5, 0x3E, 0xC0, 0x5B, 0xBB, 0xFB, 0x7A, 0x1B, 0x1A, 0x4F, 0xE1, 0x79, 0x8B, 0x10, 0xAE, 0x8F, 0x77, 0x83, 0x4B, 0x2B, 0x64, 0x2C, 0x00, 0x1C, 0xA5, 0xEA, 0x98, 0xFF, 0x4F, 0xC6, 0xF2, 0xD6, 0x99, 0x2F, 0x27, 0xAD, 0xB1, 0xAC, 0x7C, 0x23, 0x8C, 0xEF, 0x73, 0xE9, 0xB8, 0xBB, 0x78, 0x10, 0xE9, 0x44, 0x46, 0x7A, 0x20, 0x5B, 0xB7, 0x0C, 0x6D, 0x1F, 0x2B, 0xCD, 0x61, 0x54, 0x96, 0x6A, 0xD5, 0x1D, 0xEC, 0x47, 0xA4, 0x36, 0x64, 0x7D, 0x9F, 0x53, 0xBE, 0x2F, 0x11, 0xF7, 0xFB, 0xFA, 0x74, 0xBF, 0xAB, 0xD3, 0x3D, 0xAF, 0x58, 0x1F, 0xB2, 0xD9, 0x9A, 0x8D, 0xC3, 0x63, 0x43, 0x9B, 0x87, 0xC6, 0x86, 0xF2, 0x85, 0xA1, 0xD1, 0xB1, 0x2D, 0x63, 0x5B, 0x46, 0xB6, 0x97, 0x67, 0x6B, 0xCA, 0x47, 0xB8, 0x3E, 0xF6, 0x94, 0x5E, 0x8F, 0xF2, 0x71, 0x39, 0xEF, 0xC4, 0x07, 0x78, 0x93, 0xAB, 0x89, 0x89, 0xFF, 0x9D, 0x58, 0x6E, 0x3B, 0x33, 0x17, 0xDA, 0x42, 0xFA, 0x79, 0x00, 0x00, 0xF0, 0x46, 0x97, 0x8B, 0xF9, 0xDF, 0x5C, 0x5C, 0xDA, 0x9F, 0xB4, 0x7B, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4E, 0x66, 0x86, 0xCA, 0xF0, 0x7F, 0x62, 0xF9, 0xF2, 0xC2, 0xBB, 0xC2, 0xF5, 0xE9, 0x8A, 0xBA, 0x17, 0x6A, 0x72, 0xB9, 0xAA, 0x79, 0x8B, 0xE3, 0x62, 0x32, 0xAE, 0xDE, 0x6B, 0xAF, 0xBF, 0x7E, 0xF7, 0x54, 0xDB, 0xA9, 0x88, 0xB7, 0xFA, 0x71, 0x8F, 0x07, 0x97, 0x56, 0x84, 0x7C, 0xBA, 0xB0, 0xAA, 0xAF, 0xB5, 0xBD, 0x33, 0xDF, 0xD2, 0x76, 0x69, 0xDB, 0xA6, 0xB6, 0x7C, 0xC7, 0xF0, 0xF6, 0xE1, 0xD1, 0xA1, 0xB1, 0x91, 0xD1, 0x03, 0xF5, 0xCE, 0x88, 0xB7, 0x9A, 0x78, 0x2B, 0x54, 0xA4, 0xFF, 0xFC, 0x3C, 0x00, 0xE0, 0x64, 0xC8, 0xC5, 0xFC, 0x7F, 0x4F, 0x71, 0x69, 0x7F, 0x32, 0xE4, 0xED, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x30, 0x2A, 0x42, 0x65, 0xF8, 0x62, 0x2C, 0xFB, 0xAF, 0xDB, 0x9F, 0x84, 0x24, 0x2E, 0xEC, 0x0E, 0x21, 0x1F, 0x4A, 0xE5, 0x7A, 0x6F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x9B, 0x46, 0x12, 0x96, 0x26, 0xE9, 0x7D, 0x08, 0xB9, 0xB0, 0xAC, 0xB8, 0x54, 0xE8, 0x6B, 0x1C, 0xEC, 0x68, 0xDE, 0xD8, 0x3E, 0x2B, 0xAC, 0x3C, 0xF0, 0x78, 0xA0, 0xD0, 0xD6, 0xDC, 0xDF, 0x5E, 0x1D, 0x96, 0xC7, 0x35, 0x15, 0xA1, 0xAB, 0xB3, 0xB5, 0xAD, 0xB3, 0xB7, 0x26, 0x5C, 0x54, 0x7C, 0xD4, 0xDF, 0xDB, 0x53, 0x88, 0x0F, 0x43, 0x75, 0xB8, 0xB8, 0xF8, 0x78, 0xA0, 0xAF, 0x37, 0x3E, 0x9C, 0x1D, 0x56, 0xC4, 0x47, 0x33, 0x42, 0x77, 0xE1, 0x9A, 0xDE, 0x86, 0xCB, 0x2F, 0x5B, 0xB7, 0x6E, 0xB0, 0xA1, 0xC1, 0xBB, 0x0D, 0x00, 0xA7, 0x4A, 0xFE, 0xC7, 0xDB, 0xD2, 0xB4, 0xC8, 0xA5, 0x4B, 0xCB, 0x42, 0x72, 0x30, 0xFF, 0xE3, 0xE3, 0x95, 0xA5, 0xC7, 0xE5, 0xFC, 0x8F, 0x6B, 0x96, 0x87, 0x8A, 0x72, 0xFE, 0xC7, 0x47, 0x17, 0x85, 0x8A, 0x83, 0xF9, 0x1F, 0x1F, 0x5F, 0x1C, 0x2A, 0xCA, 0xF9, 0x1F, 0x1F, 0xAD, 0x08, 0x33, 0xE4, 0x3F, 0x00, 0x9C, 0x7A, 0x56, 0x16, 0xC7, 0xFF, 0xC5, 0x3E, 0x40, 0xDA, 0x01, 0x88, 0x77, 0xBB, 0x72, 0xB9, 0xAA, 0x79, 0x8B, 0xE3, 0x40, 0x3E, 0xED, 0x14, 0x24, 0xC9, 0x91, 0xD6, 0xCB, 0x2A, 0x5E, 0x16, 0xF6, 0x94, 0xEA, 0xED, 0x29, 0x76, 0x08, 0xE2, 0x5D, 0x56, 0xAF, 0xD4, 0xD7, 0x48, 0xE6, 0xA4, 0xDD, 0x89, 0xB6, 0xCE, 0xBE, 0xD6, 0xFA, 0xBE, 0x0D, 0x2D, 0x57, 0xAE, 0xC9, 0xB6, 0xDE, 0x50, 0x9C, 0x7B, 0x28, 0xF6, 0x3F, 0x26, 0xDD, 0x7A, 0xAE, 0xDC, 0x29, 0xC9, 0xEA, 0xAF, 0x2D, 0xCE, 0x4D, 0x14, 0xFB, 0x27, 0x93, 0xD6, 0x9F, 0x75, 0xB0, 0xD3, 0xE2, 0x47, 0x0C, 0x00, 0x93, 0xE4, 0xFF, 0xD4, 0xC9, 0x7B, 0xB4, 0xF9, 0xBF, 0x36, 0x3C, 0x52, 0xAA, 0xF7, 0x48, 0xD7, 0x6D, 0xE9, 0xFA, 0xDB, 0xBA, 0x76, 0xCD, 0x4A, 0xC2, 0x59, 0x97, 0x94, 0xF3, 0xBF, 0xB6, 0xB3, 0xB5, 0xA7, 0xBB, 0xA1, 0xBE, 0xD0, 0xDD, 0x51, 0x0E, 0xFF, 0xFA, 0xE2, 0xA7, 0x0A, 0xC5, 0x99, 0x85, 0x49, 0xB7, 0x5C, 0x5D, 0x9A, 0x6E, 0x38, 0x90, 0xFC, 0x0F, 0x97, 0x6A, 0x3F, 0x5C, 0x57, 0x95, 0x96, 0x55, 0x75, 0x13, 0xFB, 0x17, 0xB5, 0x85, 0xE6, 0xDE, 0xE6, 0x8D, 0xB1, 0x73, 0xD1, 0x53, 0xDE, 0xFE, 0xDA, 0xB0, 0xB7, 0xD4, 0x62, 0xEF, 0x55, 0x37, 0xAF, 0x08, 0x61, 0xC5, 0xCD, 0x57, 0x8D, 0xCE, 0x5C, 0x98, 0xCC, 0x5D, 0x56, 0x6E, 0x31, 0xAB, 0xD0, 0xD9, 0xBA, 0x66, 0xFC, 0x0E, 0x85, 0xA6, 0xF0, 0x50, 0xA9, 0xEF, 0xF2, 0x50, 0x38, 0x27, 0x2D, 0xCF, 0x39, 0xA4, 0x0F, 0x73, 0x46, 0xEC, 0x5D, 0x74, 0xF5, 0x74, 0xF4, 0xD4, 0xC7, 0xFE, 0xC5, 0xC1, 0xA3, 0xB8, 0xA8, 0xF4, 0x2A, 0x17, 0x4D, 0x7E, 0x14, 0x35, 0xE5, 0x69, 0x92, 0xAC, 0xF6, 0xC5, 0xA5, 0xDA, 0x17, 0x1F, 0xE6, 0x98, 0x4B, 0x93, 0x28, 0x4E, 0x4F, 0x00, 0x4E, 0x58, 0xFE, 0x4F, 0x9D, 0xBE, 0xC9, 0x91, 0xF6, 0x13, 0x92, 0xF2, 0x48, 0xFE, 0xE9, 0x52, 0x76, 0x3E, 0x5D, 0x5A, 0x1F, 0x0E, 0xC9, 0xCE, 0x99, 0x31, 0xCD, 0xC7, 0xE7, 0x26, 0x00, 0x30, 0x1D, 0xF9, 0x3F, 0xF5, 0xB8, 0xF5, 0x68, 0xF3, 0xBF, 0xA9, 0x78, 0xDD, 0x5F, 0xF1, 0xB3, 0xFF, 0x49, 0xEB, 0xCD, 0x76, 0x41, 0x00, 0x00, 0x9C, 0x02, 0xF9, 0x3F, 0x75, 0x5E, 0x27, 0x47, 0xDA, 0x4F, 0x38, 0x90, 0xFF, 0xEB, 0x8B, 0x33, 0xEB, 0xCB, 0xD6, 0xEF, 0x1B, 0x89, 0x4F, 0x55, 0x8C, 0xEC, 0x1B, 0x9D, 0x59, 0x57, 0xDD, 0x74, 0x41, 0x79, 0xFC, 0x3F, 0x3B, 0x9D, 0x07, 0xBF, 0xFA, 0xDA, 0xFA, 0xFE, 0xDE, 0x82, 0x29, 0x00, 0x00, 0x98, 0xB6, 0xFC, 0x9F, 0xFA, 0x93, 0xE8, 0xA3, 0x1D, 0xFF, 0x5F, 0x15, 0x1E, 0x5D, 0x94, 0x96, 0x8B, 0x1E, 0xDD, 0xF7, 0x78, 0x53, 0xEC, 0x0E, 0x3C, 0xBE, 0x6F, 0x57, 0xAE, 0xA6, 0xE6, 0x82, 0xCB, 0xCB, 0xF9, 0x7F, 0x6E, 0xF3, 0x40, 0x5B, 0x67, 0xCF, 0xE0, 0xC6, 0x81, 0xBE, 0xCE, 0xD6, 0xC1, 0x42, 0x5F, 0x63, 0x7D, 0x4B, 0xF3, 0x81, 0x8E, 0xC0, 0x15, 0xA1, 0x7E, 0x61, 0x5A, 0x2E, 0xAC, 0xDF, 0xBD, 0xB7, 0x36, 0x84, 0xDA, 0xBD, 0xBB, 0x8B, 0x6D, 0xEB, 0xCB, 0x6D, 0xCF, 0x2E, 0xB5, 0xED, 0xDB, 0xF0, 0xAE, 0x43, 0x5B, 0xAE, 0x0D, 0xFB, 0x4A, 0x9F, 0x3A, 0xEC, 0xDB, 0xB7, 0x72, 0x49, 0x08, 0x4B, 0x56, 0xEE, 0xDB, 0x55, 0x3B, 0xB3, 0x66, 0xC6, 0xB9, 0xE5, 0x96, 0xB5, 0xED, 0x2D, 0x3D, 0x3D, 0xFD, 0xF5, 0x2D, 0x9D, 0xDD, 0x07, 0x5F, 0xEB, 0xFE, 0x39, 0x69, 0x39, 0xE7, 0xFE, 0xF0, 0xCC, 0xE6, 0x10, 0x36, 0x3F, 0x13, 0x76, 0xD5, 0x56, 0xCF, 0x5B, 0xBC, 0xA4, 0xDC, 0x62, 0x6E, 0x7A, 0xB5, 0x61, 0x5B, 0x73, 0x7F, 0x73, 0xE9, 0xA5, 0x36, 0x14, 0xC6, 0x5D, 0x1D, 0x50, 0x5D, 0x9B, 0x96, 0xB5, 0xD5, 0xBB, 0x77, 0xC4, 0x43, 0x5D, 0xB4, 0x63, 0xF7, 0xAE, 0x59, 0x73, 0x2B, 0x17, 0xD4, 0x94, 0x5B, 0x9E, 0xD1, 0xD5, 0xD3, 0xDC, 0xD6, 0xD9, 0xDD, 0x51, 0xDF, 0xD1, 0xBF, 0x41, 0x17, 0x07, 0x80, 0x53, 0x35, 0xFF, 0xA7, 0xBE, 0x92, 0xFE, 0x18, 0xAE, 0xFF, 0x2F, 0x8D, 0xFF, 0xF7, 0xC4, 0xBB, 0xBA, 0xBA, 0x10, 0x26, 0xB9, 0xFE, 0xBF, 0x78, 0x61, 0x7E, 0x7D, 0x61, 0xC0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x49, 0x68, 0x49, 0xD2, 0xFB, 0x10, 0xEA, 0x42, 0x6B, 0x69, 0xA9, 0x10, 0xFA, 0x42, 0x63, 0x18, 0x0C, 0x1D, 0xA1, 0x39, 0x6C, 0x0C, 0xED, 0xE7, 0x84, 0xAB, 0x27, 0xAE, 0x1F, 0x88, 0x4B, 0x6D, 0xF1, 0xB9, 0xFE, 0xD0, 0x3E, 0x3B, 0xB4, 0xC5, 0x27, 0x2A, 0x42, 0xE8, 0x0A, 0x9D, 0xA1, 0x35, 0xAE, 0xED, 0x0C, 0xBD, 0x73, 0x42, 0x7B, 0x69, 0x5D, 0x7F, 0xE8, 0x0D, 0x3D, 0xC5, 0xBA, 0x71, 0xED, 0xEC, 0xD0, 0x51, 0x5A, 0x3B, 0x10, 0xB7, 0xD2, 0x5B, 0x5A, 0x37, 0x3F, 0x6C, 0x88, 0xEB, 0x66, 0x84, 0xD0, 0x1D, 0x6B, 0x5D, 0x13, 0xD7, 0x36, 0x84, 0xCB, 0xC3, 0x65, 0x61, 0x5D, 0xFC, 0x37, 0x18, 0x97, 0x1B, 0xFC, 0x74, 0x00, 0xE0, 0x44, 0xE5, 0x7F, 0xBC, 0xB5, 0xA4, 0x45, 0x5D, 0xBA, 0xD4, 0x1A, 0x97, 0x7E, 0x2D, 0xFF, 0xE3, 0xFA, 0xAB, 0xC7, 0xAD, 0x9F, 0x90, 0xFF, 0xF1, 0xB9, 0xB6, 0x18, 0xEB, 0x13, 0xF2, 0x3F, 0xAE, 0x6B, 0x8F, 0xEB, 0x0E, 0xC9, 0xFF, 0xB8, 0xB6, 0x23, 0xAE, 0x9D, 0x90, 0xFF, 0x71, 0xDD, 0x86, 0xD8, 0x01, 0x90, 0xFF, 0x00, 0x70, 0x52, 0xAD, 0x2C, 0x8E, 0xFF, 0x8B, 0x7D, 0x80, 0x5C, 0x5A, 0xE6, 0xC2, 0xAE, 0x5C, 0xAE, 0x6A, 0xDE, 0xE2, 0x74, 0xA8, 0x9E, 0x0E, 0xFB, 0x93, 0x23, 0xAD, 0x97, 0x55, 0x6C, 0x0B, 0x7B, 0x4A, 0xF5, 0xF6, 0x84, 0xEA, 0xB4, 0xAC, 0x2E, 0xD7, 0x2B, 0xF5, 0x35, 0x92, 0x45, 0x07, 0xBA, 0x11, 0x69, 0x17, 0xA0, 0x2F, 0x76, 0x1A, 0xEA, 0xE3, 0xFD, 0x86, 0xD0, 0x12, 0xAE, 0x0C, 0x6B, 0xB2, 0xD7, 0x5A, 0x57, 0x9C, 0x89, 0x28, 0xF6, 0x46, 0x26, 0x7D, 0xAD, 0xBA, 0x43, 0xBB, 0x28, 0x59, 0xBB, 0xAB, 0x8A, 0x33, 0x15, 0xC5, 0xDE, 0xCA, 0xA4, 0xED, 0xCE, 0x99, 0xAC, 0x0B, 0xE3, 0x14, 0x00, 0xE0, 0x4D, 0x99, 0xFF, 0x53, 0x67, 0xED, 0xD1, 0xE6, 0xFF, 0x3B, 0xC2, 0x23, 0xA5, 0x7A, 0x8F, 0x74, 0xDD, 0x96, 0xAE, 0xBF, 0xAD, 0x6B, 0xD7, 0xAC, 0x24, 0x9C, 0x75, 0x49, 0x39, 0xFF, 0xCF, 0x2B, 0x4E, 0x14, 0xF4, 0xC4, 0x21, 0x7F, 0x43, 0x4C, 0xFE, 0x42, 0x2C, 0x3B, 0xC6, 0x25, 0x7F, 0x53, 0xF1, 0xF3, 0x84, 0xE2, 0x9C, 0xC2, 0xA4, 0xAF, 0x32, 0x7B, 0xFC, 0x44, 0x43, 0x28, 0xBF, 0xE2, 0xC3, 0xA5, 0x36, 0x0F, 0xD7, 0x55, 0xA5, 0x65, 0x55, 0xDD, 0xC4, 0x1E, 0xC7, 0x79, 0xF1, 0x55, 0x9A, 0x63, 0xED, 0xB4, 0xA7, 0x50, 0xEA, 0x6B, 0xF4, 0x8C, 0x7B, 0xC5, 0xAB, 0xC2, 0xDE, 0x52, 0xEB, 0xBD, 0x57, 0xDD, 0xBC, 0x22, 0x84, 0x15, 0x37, 0x5F, 0x35, 0x3A, 0x73, 0x61, 0x32, 0x77, 0x59, 0xB9, 0x75, 0xDA, 0x67, 0x48, 0x5F, 0x71, 0xCD, 0x24, 0x7B, 0xDB, 0x12, 0x1E, 0x2A, 0xF5, 0x71, 0x1E, 0x0A, 0xE9, 0x24, 0x49, 0xBC, 0x9B, 0xF8, 0xCA, 0xE7, 0x67, 0xFD, 0x8D, 0xAE, 0xF8, 0x8A, 0x1D, 0xF1, 0x56, 0x9F, 0xF5, 0x39, 0x0E, 0x6E, 0xE1, 0xB2, 0xE2, 0x67, 0x25, 0xC5, 0xF9, 0x92, 0x49, 0x8F, 0x77, 0xCE, 0xC4, 0x49, 0x94, 0x03, 0xEF, 0x52, 0x47, 0xA9, 0x55, 0xC7, 0xE1, 0xDE, 0xA5, 0x71, 0x93, 0x2C, 0x4E, 0x71, 0x00, 0x26, 0xCD, 0xFF, 0xA9, 0x13, 0x37, 0x39, 0xD2, 0x7E, 0x42, 0x56, 0xF1, 0x8A, 0xF0, 0x74, 0x29, 0x13, 0x9F, 0x2E, 0xAD, 0x0F, 0x87, 0x64, 0xE2, 0xDC, 0x2C, 0xC1, 0x7F, 0x3D, 0x0B, 0x01, 0x80, 0x93, 0x97, 0xFF, 0x53, 0x8F, 0x40, 0x8F, 0x36, 0xFF, 0xD7, 0x17, 0xAF, 0xE9, 0x2B, 0x7E, 0xAE, 0x3F, 0x69, 0xBD, 0xF9, 0x3E, 0xEC, 0x07, 0x80, 0x53, 0x20, 0xFF, 0xA7, 0xCE, 0xEB, 0xE4, 0x48, 0xFB, 0x09, 0x07, 0xF2, 0x7F, 0x7D, 0x71, 0xEE, 0x7C, 0xD9, 0xFA, 0x7D, 0x23, 0xF1, 0xA9, 0x8A, 0x91, 0x7D, 0xA3, 0x33, 0xEB, 0xAA, 0x9B, 0x2E, 0x28, 0x8F, 0xFF, 0xE7, 0x1F, 0x98, 0xD1, 0xBE, 0x3A, 0x5C, 0x1B, 0xEA, 0x8B, 0x8F, 0x0A, 0x66, 0x01, 0x00, 0xE0, 0x24, 0xE7, 0xFF, 0xD4, 0x9F, 0x25, 0x1F, 0xED, 0xF8, 0xFF, 0x1D, 0x61, 0x5F, 0x69, 0xFE, 0x7F, 0xDF, 0xBE, 0x95, 0x4B, 0x42, 0x58, 0xB2, 0x72, 0xDF, 0xAE, 0xDA, 0x99, 0x35, 0x33, 0xCE, 0x2D, 0xE7, 0xFF, 0x79, 0xA1, 0x3D, 0xB4, 0xC4, 0xFC, 0xEF, 0x89, 0xC9, 0x5F, 0x1F, 0x97, 0x3A, 0x43, 0xF7, 0xB8, 0xF4, 0xEF, 0x0D, 0x8F, 0x2E, 0x4A, 0xCB, 0x45, 0x8F, 0xEE, 0x7B, 0xBC, 0x29, 0x84, 0xA6, 0xC7, 0xF7, 0xED, 0xCA, 0xD5, 0xD4, 0x5C, 0x70, 0x79, 0xB9, 0xF5, 0xAA, 0x30, 0x14, 0x6E, 0x0D, 0x9B, 0xC3, 0x96, 0x30, 0x12, 0x06, 0xC3, 0xB6, 0xB8, 0xBC, 0x33, 0x2E, 0xDF, 0x10, 0x97, 0x4B, 0x9F, 0xB4, 0xD7, 0x87, 0xF7, 0xC6, 0x1A, 0x3B, 0xC6, 0x6D, 0xB1, 0x3B, 0xD4, 0x2F, 0x4C, 0xCB, 0x85, 0xF5, 0xBB, 0xF7, 0xD6, 0x86, 0x50, 0xBB, 0x77, 0x77, 0x71, 0x8B, 0xF5, 0xE5, 0x2D, 0xAE, 0x98, 0xB0, 0xC5, 0x9D, 0xE1, 0xC6, 0x70, 0xFB, 0x14, 0x5B, 0xEB, 0x0A, 0xF7, 0xA7, 0xBF, 0xDE, 0x10, 0xE6, 0xDC, 0x1F, 0x9E, 0xD9, 0x1C, 0xC2, 0xE6, 0x67, 0xC2, 0xAE, 0xDA, 0xEA, 0x79, 0x8B, 0x97, 0x94, 0xB7, 0xB6, 0x3C, 0xDC, 0x14, 0x5B, 0x6C, 0x0B, 0xC3, 0x71, 0x8B, 0x43, 0x61, 0x2C, 0xDE, 0x06, 0x63, 0xFB, 0x9D, 0xD9, 0xB6, 0x6E, 0x9C, 0xB0, 0xAD, 0x96, 0x50, 0x5D, 0x9B, 0x96, 0xB5, 0xD5, 0xBB, 0x77, 0xC4, 0x83, 0x5E, 0xB4, 0x63, 0xF7, 0xAE, 0x59, 0x73, 0x2B, 0x17, 0xD4, 0x94, 0xB7, 0x75, 0x7E, 0xD8, 0x1A, 0xF7, 0x69, 0xA8, 0xB8, 0x6F, 0xDB, 0xE3, 0x76, 0xEB, 0xE3, 0x6D, 0x2C, 0x6E, 0x43, 0x5F, 0x09, 0x80, 0xE3, 0x91, 0xFF, 0x53, 0x5F, 0x33, 0x7F, 0x0C, 0xD7, 0xFF, 0x97, 0xC6, 0xFF, 0x7B, 0xE2, 0x5D, 0x5D, 0xFA, 0x3B, 0x85, 0x93, 0x5F, 0xFF, 0x7F, 0xF0, 0x0A, 0xFC, 0xF4, 0xBA, 0xBA, 0x01, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x72, 0x33, 0x92, 0xCA, 0xF0, 0xF9, 0x58, 0xFE, 0xDF, 0x5F, 0xFE, 0xBB, 0x03, 0xEB, 0xAA, 0xE2, 0x2D, 0x09, 0xE1, 0x9F, 0x4A, 0x8F, 0xF2, 0xE1, 0xF5, 0xCC, 0xC4, 0x96, 0x49, 0xF6, 0x6C, 0xA6, 0xEE, 0x85, 0x9A, 0x5C, 0xAE, 0x6A, 0xDE, 0xE2, 0x29, 0x96, 0x93, 0xC9, 0x76, 0x60, 0x55, 0x5F, 0x6B, 0x7B, 0x67, 0xBE, 0xA5, 0xED, 0xD2, 0xB6, 0x4D, 0x6D, 0xF9, 0x8E, 0xE1, 0xED, 0xC3, 0xA3, 0x43, 0x63, 0x23, 0xA3, 0x93, 0xEE, 0x6B, 0x2E, 0x7B, 0xDD, 0xBC, 0x1F, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF1, 0x97, 0x54, 0x86, 0x3B, 0x63, 0xF1, 0xB1, 0xD7, 0xF7, 0x27, 0xC5, 0xC7, 0x75, 0x2F, 0xD4, 0xE4, 0x72, 0x55, 0xF3, 0x16, 0xC7, 0xC5, 0xCA, 0xF8, 0x2F, 0x5D, 0x99, 0x8C, 0xAF, 0xDF, 0xD3, 0xD7, 0xDF, 0x9C, 0x6F, 0x1D, 0xD9, 0xB6, 0x63, 0x74, 0x78, 0xE7, 0xCE, 0xE1, 0xCD, 0xF9, 0x81, 0xED, 0x5B, 0x6E, 0x18, 0xD9, 0x3C, 0x7C, 0xA4, 0x2F, 0x97, 0x2B, 0xF4, 0x35, 0x6E, 0xEA, 0xE9, 0x1A, 0xD8, 0xD8, 0x3E, 0x2D, 0x47, 0x3B, 0xEB, 0x04, 0xEF, 0xFF, 0xAC, 0xDF, 0x7A, 0x0F, 0x73, 0x21, 0x54, 0x8C, 0x7F, 0xCF, 0x57, 0x15, 0x77, 0x78, 0xA0, 0x6D, 0x43, 0x71, 0xA7, 0xB7, 0x6E, 0x19, 0xDA, 0x3E, 0x96, 0xAE, 0x2E, 0x54, 0x54, 0x3A, 0x77, 0x01, 0xF8, 0x2D, 0xE2, 0xA6, 0x32, 0xBC, 0x5A, 0x5C, 0xDA, 0x9F, 0x24, 0xDE, 0x0E, 0x00, 0x78, 0x53, 0x98, 0x11, 0xC7, 0xFF, 0x9F, 0x8D, 0xE5, 0xFC, 0xAB, 0x57, 0x27, 0x15, 0xD9, 0xBA, 0xAA, 0xD2, 0xF8, 0xB3, 0xAA, 0xF4, 0xA8, 0xA1, 0xE2, 0xF5, 0xCC, 0xBF, 0x3D, 0x27, 0x9D, 0x13, 0x28, 0x79, 0xBA, 0x3C, 0x7D, 0x50, 0xDE, 0xD0, 0xB8, 0x79, 0x83, 0xC3, 0x2D, 0x4F, 0xDA, 0xBF, 0x58, 0xD5, 0xD7, 0xDA, 0xDE, 0x99, 0x6F, 0x69, 0xBB, 0xB4, 0x6D, 0x53, 0x5B, 0xBE, 0x63, 0x78, 0xFB, 0xF0, 0xE8, 0xD0, 0xD8, 0xC8, 0xE8, 0xAF, 0x55, 0xFB, 0x50, 0x69, 0x68, 0x1C, 0xAA, 0xE3, 0xFE, 0x8E, 0xC4, 0xF2, 0xE1, 0xA7, 0x72, 0xC5, 0x71, 0xF2, 0xFC, 0x78, 0x4B, 0xF7, 0x2D, 0x7D, 0x32, 0xDD, 0x7E, 0x53, 0xB6, 0xFF, 0x61, 0x55, 0x3A, 0x64, 0xDE, 0x30, 0x3A, 0x3C, 0xDC, 0xDE, 0xDC, 0xB7, 0x63, 0xE8, 0x86, 0xF2, 0x00, 0xBF, 0x90, 0x1D, 0xE4, 0x1F, 0xCF, 0x28, 0x6D, 0x30, 0x6D, 0xB3, 0x2E, 0xDB, 0x76, 0xA9, 0x4D, 0xBA, 0x1F, 0xAD, 0x1D, 0x1B, 0xFB, 0xF2, 0x9D, 0xDB, 0x6F, 0x1C, 0x99, 0xD0, 0xE6, 0xB3, 0x33, 0x0E, 0x1E, 0xBB, 0xD1, 0x37, 0x00, 0xA7, 0xB3, 0x24, 0xE6, 0xE9, 0x57, 0x63, 0xB9, 0x76, 0x68, 0x7E, 0x31, 0xD3, 0x92, 0x74, 0x0A, 0xFB, 0xD0, 0x39, 0xE8, 0xAC, 0xDE, 0xC7, 0x63, 0x39, 0x30, 0x6B, 0x79, 0x56, 0x2F, 0x9C, 0x91, 0xD6, 0xCB, 0xFA, 0x0A, 0xA1, 0xAE, 0x34, 0x9B, 0x50, 0xE8, 0x6B, 0x1C, 0x6C, 0xEB, 0xEC, 0x6B, 0xAD, 0xEF, 0xDB, 0xD0, 0x52, 0x6C, 0x73, 0x6F, 0x5C, 0x3B, 0x18, 0xF2, 0x59, 0x9B, 0x8A, 0x99, 0x69, 0x9B, 0x19, 0x59, 0x9B, 0xB3, 0x0E, 0xB6, 0xE9, 0x68, 0xDE, 0xD8, 0x5E, 0xAC, 0x9F, 0xF6, 0x45, 0xEE, 0xF9, 0x59, 0xF9, 0x35, 0x2A, 0x6A, 0xD3, 0xFA, 0xE7, 0x67, 0xF5, 0x97, 0x1C, 0xAC, 0x3F, 0x50, 0x68, 0x6B, 0xEE, 0x6F, 0xF7, 0xE3, 0x03, 0x80, 0x63, 0x1E, 0xFF, 0x7F, 0x30, 0x96, 0x7B, 0x1E, 0x6C, 0x4A, 0xAA, 0x26, 0x8E, 0xFF, 0xB3, 0xD1, 0xEE, 0x9A, 0x03, 0xE3, 0xFF, 0x0F, 0xD5, 0x8D, 0xEB, 0x13, 0x54, 0x9F, 0x9C, 0xF1, 0x7F, 0xDD, 0xB8, 0xF1, 0x7F, 0x5D, 0x36, 0xFE, 0xBF, 0x25, 0x1B, 0xFF, 0x57, 0x4D, 0xD3, 0xF8, 0x3F, 0x3D, 0xF6, 0xF5, 0x4E, 0x1D, 0x00, 0x4E, 0xF3, 0xFC, 0xFF, 0x49, 0x2C, 0x47, 0xAF, 0x58, 0x9D, 0xCC, 0x98, 0x98, 0xFF, 0x93, 0xCE, 0xFF, 0x97, 0xFB, 0x08, 0xBF, 0x9F, 0x9C, 0x9C, 0xFC, 0x3F, 0x6B, 0x5C, 0xFE, 0x97, 0xE7, 0xFF, 0x47, 0xB3, 0xFC, 0x9F, 0x31, 0x4D, 0xF9, 0x9F, 0x1E, 0x7B, 0xB5, 0x53, 0x07, 0x80, 0xD3, 0x58, 0x3A, 0xE7, 0xFE, 0xB5, 0x50, 0x9A, 0xFF, 0xAF, 0x0E, 0x53, 0xCF, 0xFF, 0xFF, 0x34, 0x96, 0x8B, 0x1E, 0xC9, 0x67, 0xF5, 0x62, 0xC5, 0x58, 0xAF, 0x26, 0xAB, 0x37, 0xB7, 0x58, 0x2B, 0xD7, 0xD9, 0xDA, 0xD3, 0xDD, 0x50, 0x5F, 0xE8, 0xEE, 0x48, 0xEB, 0xFF, 0x38, 0xAE, 0xF9, 0x5A, 0x65, 0xB9, 0x7E, 0x45, 0x4D, 0x5A, 0x3F, 0x97, 0xD5, 0x3F, 0xBB, 0x54, 0xBF, 0xAB, 0xB3, 0xB5, 0xAD, 0xB3, 0x37, 0xDB, 0xFE, 0xC6, 0x58, 0x6E, 0xFC, 0xDE, 0xC4, 0xED, 0xD7, 0x66, 0xF5, 0xCF, 0x2D, 0xD5, 0x2F, 0x34, 0xF7, 0x36, 0x6F, 0xAC, 0xEF, 0xDB, 0xD0, 0x93, 0xD6, 0xDF, 0x19, 0xD7, 0x5C, 0xF3, 0xBF, 0x0F, 0xD4, 0x2F, 0x7E, 0xB6, 0x30, 0x3B, 0xAB, 0x7F, 0x5E, 0x56, 0xBF, 0xB3, 0x75, 0x4D, 0xBA, 0x3B, 0xC5, 0xED, 0x3F, 0x10, 0xD7, 0x5C, 0x72, 0xE5, 0xF2, 0x72, 0xFD, 0xD9, 0x69, 0xFD, 0x33, 0xB2, 0xFA, 0xF3, 0xB2, 0xFA, 0x7D, 0x8D, 0x5D, 0x3D, 0x1D, 0x3D, 0xF5, 0x6D, 0xCD, 0xFD, 0xA5, 0x7D, 0x5A, 0x14, 0xD7, 0xBE, 0xFF, 0x23, 0x07, 0x8E, 0x21, 0x97, 0xB6, 0x99, 0x93, 0xB5, 0x99, 0x5F, 0x6A, 0xD3, 0xDF, 0xDB, 0x53, 0x28, 0x1E, 0x44, 0x5A, 0xFF, 0xC5, 0xB8, 0xE6, 0xB1, 0xB3, 0x26, 0x1E, 0xF3, 0xD9, 0x59, 0xFD, 0x85, 0xA5, 0xFA, 0x03, 0x7D, 0xBD, 0xA5, 0x63, 0x06, 0x80, 0xE9, 0x1C, 0xFF, 0xDF, 0x1E, 0xCB, 0x6F, 0x6D, 0x6E, 0x4A, 0x6A, 0x26, 0x8E, 0xFF, 0xA7, 0x9C, 0xFF, 0xEF, 0xBA, 0xAD, 0xB4, 0x74, 0xE9, 0xB8, 0xF1, 0xFF, 0xAC, 0x24, 0x9C, 0x75, 0x49, 0xD3, 0xE1, 0x97, 0x8F, 0x65, 0xFC, 0x3F, 0x77, 0xDC, 0xF8, 0xBF, 0x3C, 0xFF, 0x3F, 0x96, 0x8D, 0xFF, 0x6B, 0xA6, 0x69, 0xFC, 0x9F, 0x1E, 0x7B, 0x8B, 0x53, 0x07, 0x80, 0xD3, 0x3C, 0xFF, 0xD3, 0x71, 0xFA, 0x2F, 0x9E, 0x58, 0x9D, 0xE4, 0x26, 0xE6, 0xFF, 0xA4, 0xF3, 0xFF, 0xE5, 0x0C, 0x7F, 0x57, 0x79, 0x5E, 0x60, 0x5C, 0xFE, 0x9F, 0x88, 0xF9, 0xFF, 0xB3, 0xC7, 0xE5, 0x7F, 0x79, 0xFE, 0xFF, 0xD6, 0x2C, 0xFF, 0x73, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0xCF, 0x74, 0xEA, 0x00, 0x70, 0x1A, 0x4B, 0xE7, 0xAC, 0x6F, 0x88, 0xE5, 0x7F, 0xDD, 0x39, 0xBF, 0x98, 0x69, 0xE5, 0xF9, 0xFF, 0x89, 0xD7, 0xE8, 0x97, 0xEA, 0xBD, 0x3D, 0x96, 0xCB, 0x5E, 0xCC, 0x67, 0xF5, 0x42, 0x31, 0x80, 0x67, 0x65, 0xF5, 0xCE, 0x29, 0xD6, 0x4A, 0xE7, 0xF3, 0x4B, 0x73, 0xE7, 0x00, 0xC0, 0xA9, 0x3D, 0xFE, 0x7F, 0x2D, 0x96, 0x8B, 0x3E, 0xD7, 0x94, 0xCC, 0x9A, 0x38, 0xFE, 0x9F, 0xFA, 0xFA, 0xFF, 0x6C, 0x29, 0x7F, 0x82, 0xC7, 0xFF, 0xE7, 0x8C, 0x1B, 0xFF, 0x97, 0xE7, 0xFF, 0x77, 0x65, 0xE3, 0xFF, 0x59, 0xD3, 0x34, 0xFE, 0x4F, 0x5B, 0x5D, 0x3F, 0xC3, 0xB9, 0x03, 0xC0, 0xE9, 0x9D, 0xFF, 0xCF, 0xC6, 0xF2, 0xCE, 0xA4, 0x29, 0xA9, 0x3D, 0x8A, 0xFC, 0xAF, 0xAB, 0x1A, 0xDF, 0x0B, 0x38, 0x71, 0xF9, 0x7F, 0xEE, 0x24, 0xF9, 0x7F, 0x7B, 0x96, 0xFF, 0xB5, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0x37, 0x3B, 0x75, 0x00, 0x38, 0xCD, 0xF3, 0xFF, 0x97, 0x69, 0x06, 0x8E, 0x35, 0x25, 0xB3, 0x8F, 0x22, 0xFF, 0xAF, 0xBA, 0x79, 0x45, 0xB1, 0xFC, 0x66, 0xF9, 0x17, 0x02, 0xEB, 0x9E, 0xAF, 0x99, 0xB9, 0x30, 0x99, 0xBB, 0xAC, 0xEA, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0xE7, 0x4D, 0x92, 0xFF, 0x77, 0x64, 0xF9, 0x3F, 0x7B, 0x9A, 0xF2, 0x3F, 0x3D, 0xF6, 0x5B, 0x9C, 0x3A, 0x00, 0x9C, 0xE6, 0xF9, 0x7F, 0x57, 0x2C, 0xEF, 0x7D, 0xAC, 0x29, 0x39, 0xE3, 0x28, 0xF2, 0xBF, 0x3C, 0x31, 0x5F, 0x79, 0x82, 0xC7, 0xFF, 0xF3, 0x26, 0xC9, 0xFF, 0x0F, 0x64, 0xF9, 0x7F, 0xC6, 0x34, 0xE5, 0x7F, 0x7A, 0xEC, 0xBF, 0x6B, 0xFE, 0x1F, 0x80, 0xD3, 0x3C, 0xFF, 0xD3, 0xEC, 0x9B, 0xF5, 0xD4, 0xEA, 0x64, 0xCE, 0xC4, 0xFC, 0x9F, 0xF4, 0xFA, 0xFF, 0xF2, 0x77, 0x04, 0xFC, 0xCB, 0xAC, 0x3C, 0xD1, 0xF3, 0xFF, 0xF3, 0xC7, 0xE5, 0x7F, 0xF9, 0xFA, 0xFF, 0x0F, 0x66, 0xF9, 0x3F, 0x67, 0x9A, 0xF2, 0x3F, 0x3D, 0xF6, 0x33, 0x9D, 0x3A, 0x00, 0x9C, 0xC6, 0xD2, 0xEB, 0xFA, 0xB7, 0x84, 0xD2, 0xF5, 0xFF, 0x67, 0x86, 0xA9, 0xAF, 0xFF, 0xFF, 0x7E, 0x2C, 0x3F, 0xB8, 0x62, 0x79, 0x56, 0xAF, 0xA2, 0xF8, 0xF7, 0xFF, 0xEB, 0xB2, 0x7A, 0x0B, 0x8A, 0xB5, 0x72, 0xDD, 0x85, 0x6B, 0x7A, 0x1B, 0x2E, 0xBF, 0x6C, 0xDD, 0xBA, 0xC1, 0x86, 0x06, 0x6F, 0x2E, 0x00, 0x9C, 0xC2, 0xE3, 0xFF, 0xFA, 0x58, 0xFE, 0xA7, 0xD5, 0xAB, 0x93, 0xBA, 0x23, 0x18, 0xFF, 0x27, 0x27, 0x79, 0xFC, 0xBF, 0x60, 0x92, 0xF1, 0xFF, 0x9D, 0xD9, 0xF8, 0xBF, 0x6E, 0x1A, 0xC7, 0xFF, 0x67, 0x39, 0x75, 0x00, 0x38, 0xCD, 0xC7, 0xFF, 0xE9, 0x75, 0x74, 0xB5, 0xFF, 0x6D, 0x7E, 0x31, 0xD3, 0xCA, 0xE3, 0xFF, 0x89, 0x7F, 0xE3, 0xB6, 0x54, 0xEF, 0x9E, 0x58, 0x3E, 0xFE, 0xC0, 0xF2, 0xAC, 0x5E, 0x28, 0x7E, 0x37, 0xDF, 0xDC, 0xAC, 0xDE, 0xF9, 0xA5, 0xF1, 0x7F, 0xFA, 0xB7, 0x70, 0xAF, 0xBE, 0xB6, 0xBE, 0xBF, 0xB7, 0xE0, 0xAD, 0x05, 0x80, 0x53, 0x7A, 0xFC, 0x9F, 0xFE, 0x5D, 0xFA, 0xF7, 0xDD, 0xD0, 0x94, 0xCC, 0x9D, 0x38, 0xFE, 0x9F, 0xF2, 0xFA, 0xBF, 0x7D, 0x23, 0xA5, 0x41, 0x71, 0xF7, 0x81, 0xF1, 0xFF, 0xF3, 0x35, 0x33, 0xEB, 0xAA, 0x9B, 0x2E, 0xF8, 0xDD, 0xC3, 0x2F, 0x1F, 0xCB, 0xF8, 0xFF, 0xFC, 0x71, 0xE3, 0xFF, 0xF2, 0xF5, 0x7F, 0x77, 0x67, 0xE3, 0xFF, 0xB9, 0xD3, 0x34, 0xFE, 0x4F, 0x8F, 0x7D, 0xDF, 0x12, 0xE7, 0x0E, 0x00, 0xA7, 0x77, 0xFE, 0xBF, 0x3B, 0x96, 0x4F, 0x5D, 0xB3, 0x3A, 0x39, 0x7B, 0x62, 0xFE, 0x4F, 0x39, 0xFF, 0xBF, 0xEE, 0x24, 0x7D, 0xFF, 0xDF, 0xC2, 0x71, 0xF9, 0x5F, 0x9E, 0xFF, 0xDF, 0x9D, 0xE5, 0xFF, 0xD9, 0xD3, 0x94, 0xFF, 0xE9, 0xB1, 0x9F, 0xE3, 0xD4, 0x01, 0xE0, 0x34, 0x96, 0xCE, 0xEB, 0x6F, 0x0F, 0xA5, 0xEB, 0xFF, 0xCE, 0x09, 0x53, 0x5F, 0xFF, 0x97, 0xFE, 0xBD, 0x9D, 0x9D, 0x83, 0xF9, 0xAC, 0x5E, 0xE9, 0xFB, 0xF9, 0xCE, 0xCD, 0xEA, 0x2D, 0x2A, 0xD6, 0xCA, 0xB5, 0xB7, 0xF4, 0xF4, 0xF4, 0xD7, 0xB7, 0x74, 0x76, 0xA7, 0xF5, 0xEF, 0x8B, 0x6B, 0x7E, 0x70, 0xCB, 0xEA, 0x72, 0xFD, 0x73, 0xD2, 0xFA, 0xE7, 0x65, 0xF5, 0x17, 0x97, 0xEA, 0x0F, 0xDD, 0xBA, 0x79, 0xCB, 0xC8, 0xE0, 0xB6, 0x5B, 0x77, 0x6E, 0xB9, 0x61, 0xB0, 0xD0, 0xD7, 0x58, 0xFF, 0xDE, 0xA1, 0x1D, 0xA5, 0xD7, 0x1A, 0x8A, 0xCF, 0xFE, 0x75, 0xFF, 0xCA, 0x72, 0xDB, 0xB9, 0x69, 0xDB, 0x79, 0x59, 0xDB, 0x0B, 0xC6, 0xB7, 0xDD, 0x79, 0xE3, 0xED, 0xE5, 0x96, 0x69, 0xBB, 0x57, 0xE2, 0x33, 0x1F, 0xBE, 0xEC, 0x40, 0xBB, 0xB3, 0xD2, 0x76, 0xF3, 0xB3, 0x76, 0x17, 0x96, 0xDA, 0xDD, 0x34, 0xB4, 0x6D, 0x78, 0xF3, 0xD0, 0xD8, 0xD0, 0xE0, 0x8E, 0x9D, 0xB1, 0xD9, 0x8D, 0x3B, 0x8A, 0xAF, 0x77, 0x4D, 0x3A, 0x07, 0xF2, 0x95, 0xE5, 0xE5, 0x76, 0xC5, 0xEF, 0x06, 0x5C, 0x90, 0xB5, 0xCB, 0x97, 0xDA, 0x6D, 0x1D, 0x19, 0xDA, 0xBC, 0x65, 0xFB, 0x4D, 0xF5, 0x37, 0x8D, 0xDD, 0xE8, 0xBC, 0x01, 0xE0, 0xF4, 0x1F, 0xFF, 0x3F, 0x94, 0x66, 0xE3, 0x25, 0x4D, 0xC9, 0xB9, 0x13, 0xC7, 0xFF, 0x53, 0xCF, 0xFF, 0xAF, 0x2C, 0x4D, 0x80, 0xAF, 0xA8, 0x3A, 0x38, 0xFE, 0xAF, 0x9D, 0x59, 0x33, 0xE3, 0xDC, 0xC2, 0xE1, 0x97, 0x8F, 0x65, 0xFC, 0xBF, 0x68, 0xDC, 0xF8, 0xBF, 0x3C, 0xFF, 0x7F, 0x4F, 0x36, 0xFE, 0x3F, 0x77, 0x9A, 0xC6, 0xFF, 0xE9, 0xB1, 0xEF, 0xF6, 0xFB, 0xFF, 0x00, 0x9C, 0xE6, 0xF9, 0xBF, 0x35, 0x96, 0xFF, 0x98, 0x6F, 0x4A, 0xCE, 0x3B, 0x9A, 0xFC, 0x7F, 0xBC, 0xA9, 0x58, 0x3E, 0x50, 0x7D, 0x30, 0xFF, 0x73, 0x35, 0x35, 0x17, 0x5C, 0xBE, 0xFA, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0x8B, 0x27, 0xC9, 0xFF, 0x3F, 0xC8, 0xF2, 0xFF, 0xBC, 0xE9, 0xCA, 0xFF, 0x78, 0xEC, 0x9D, 0x0B, 0x9D, 0x3B, 0x00, 0x9C, 0xDE, 0xF9, 0xFF, 0x58, 0x9A, 0x81, 0x17, 0x36, 0x25, 0xF3, 0x8E, 0x22, 0xFF, 0x77, 0xEF, 0x2D, 0x7D, 0x5B, 0xC0, 0x07, 0x93, 0x89, 0xF9, 0x5F, 0xBF, 0xEC, 0xF0, 0xCB, 0xC7, 0x92, 0xFF, 0x17, 0x4C, 0x92, 0xFF, 0x1F, 0xCA, 0xF2, 0x7F, 0xDE, 0x34, 0xE5, 0x7F, 0x7A, 0xEC, 0xDF, 0x5C, 0xE0, 0xDC, 0x01, 0xE0, 0xF4, 0xCE, 0xFF, 0x3F, 0x8A, 0xE5, 0x63, 0x9F, 0x68, 0x4A, 0xE6, 0x1F, 0x45, 0xFE, 0x87, 0x67, 0x36, 0x17, 0x8B, 0x07, 0x67, 0x1F, 0xCC, 0xFF, 0xDA, 0xEA, 0x79, 0x8B, 0x97, 0x34, 0x1D, 0x7E, 0xF9, 0x58, 0xF2, 0xFF, 0xC2, 0x49, 0xF2, 0xFF, 0xC3, 0x59, 0xFE, 0xCF, 0x9F, 0xA6, 0xFC, 0x4F, 0x8F, 0xFD, 0x6D, 0x67, 0x38, 0x77, 0x00, 0x38, 0xBD, 0xF3, 0xFF, 0xF7, 0x62, 0x79, 0xE6, 0x3F, 0x36, 0x25, 0x0B, 0x8E, 0x66, 0xFC, 0xBF, 0xA3, 0xF4, 0xC9, 0xFC, 0x27, 0x2B, 0x0F, 0xE6, 0xFF, 0xAC, 0xB9, 0x95, 0x0B, 0x6A, 0x9A, 0x0F, 0xBF, 0x7C, 0x2C, 0xF9, 0x9F, 0x9F, 0x24, 0xFF, 0x3F, 0x92, 0xE5, 0xFF, 0x82, 0xE9, 0x1A, 0xFF, 0xC7, 0x63, 0xFF, 0xE2, 0x4C, 0xE7, 0x0E, 0x00, 0xA7, 0x77, 0xFE, 0x3F, 0x15, 0xCB, 0x25, 0x9D, 0xAB, 0x93, 0xF3, 0x27, 0xE6, 0xFF, 0x29, 0xF1, 0xF7, 0xFF, 0x96, 0x8C, 0xCB, 0xFF, 0xF2, 0xEF, 0xFF, 0xDD, 0x9B, 0xE5, 0xFF, 0xF9, 0x61, 0xFA, 0xFE, 0xFE, 0x9F, 0x8F, 0xFF, 0x01, 0x38, 0x9D, 0xA5, 0xBF, 0xFB, 0xF6, 0x57, 0xB1, 0x5C, 0x3B, 0x34, 0xBF, 0x98, 0x69, 0xE5, 0xDF, 0xFF, 0xAB, 0x38, 0x24, 0xAF, 0x93, 0xEC, 0xBA, 0xBB, 0xDE, 0x97, 0x96, 0x67, 0xF5, 0x42, 0xF1, 0xEF, 0xFF, 0x2F, 0xCA, 0xEA, 0x2D, 0x2D, 0xD6, 0xCA, 0x15, 0xFA, 0x1A, 0x07, 0x0A, 0x6D, 0xCD, 0xFD, 0xF5, 0x85, 0x01, 0x7F, 0x01, 0x10, 0x00, 0x4E, 0xE5, 0xF1, 0xFF, 0xDE, 0x58, 0xDE, 0xF9, 0x4F, 0x4D, 0xC9, 0xA2, 0x89, 0xE3, 0xFF, 0xA9, 0x3F, 0xFF, 0x2F, 0x4D, 0xC7, 0x87, 0x03, 0xDF, 0x08, 0x78, 0x82, 0xC6, 0xFF, 0x4B, 0xC7, 0x8D, 0xFF, 0xCB, 0xF3, 0xFF, 0x1F, 0xCB, 0xC6, 0xFF, 0x8B, 0xA6, 0x69, 0xFC, 0x9F, 0xEE, 0xCA, 0xFA, 0xA5, 0xCE, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x1D, 0xFF, 0x1F, 0xA0, 0x0B, 0xDC, 0xE8, 0x00, 0x00, 0x0D, 0x00 };
            FooterLength = 36;
            Footer = new byte[] { 0x1F, 0x8B, 0x08, 0x08, 0xFF, 0x0C, 0x3F, 0x65, 0x02, 0x00, 0x30, 0x00, 0x63, 0x18, 0x05, 0xA3, 0x60, 0x14, 0x8C, 0x82, 0x51, 0x30, 0x0A, 0x46, 0xC1, 0x88, 0x03, 0x00, 0x9E, 0xBA, 0xE8, 0xF1, 0x00, 0x08, 0x00, 0x00 };
            RegionCount = 3;
            RegionHashes = new byte[RegionCount][];
            for (int i = 0; i < RegionCount; i++)
                RegionHashes[i] = NullMD5;
            FileCount = 1;
            FileKeys = new ulong[FileCount];
            for (int i = 0; i < FileCount; i++)
                FileKeys[i] = (ulong)(i * 16);
            FileHashes = new byte[FileCount][];
            for (int i = 0; i < FileCount; i++)
                FileHashes[i] = NullMD5;
        }

        /// <summary>
        /// Write IRD data to file
        /// </summary>
        /// <param name="irdPath">Path to IRD file to be written to</param>
        public void Write(string irdPath)
        {
            // Validate irdPath
            if (irdPath == null || irdPath.Length <= 0)
                throw new ArgumentNullException(nameof(irdPath));

            // Create new stream to write to
            Stream stream = new MemoryStream();

            // Write IRD data to stream in order
            using (BinaryWriter bw = new BinaryWriter(stream, Encoding.UTF8, true))
            {
                // IRD File Signature
                bw.Write(Magic);

                // IRD File Version
                bw.Write(Version);

                // PARAM.SFO / TITLE_ID
                byte[] titleIDBuf = Encoding.ASCII.GetBytes(TitleID);
                bw.Write(titleIDBuf, 0, 9);

                // PARAM.SFO / TITLE
                bw.Write(Title);

                // PARAM.SFO / PS3_SYSTEM_VER
                byte[] systemVersionBuf = Encoding.ASCII.GetBytes(SystemVersion);
                bw.Write(systemVersionBuf, 0, 4);

                // PARAM.SFO / VERSION
                byte[] buf = Encoding.ASCII.GetBytes(GameVersion);
                byte[] gameVersionBuf = new byte[5];
                Array.Copy(buf, 0, gameVersionBuf, 0, buf.Length);
                bw.Write(gameVersionBuf, 0, 5);

                // PARAM.SFO / APP_VER
                buf = Encoding.ASCII.GetBytes(AppVersion);
                byte[] appVersionBuf = new byte[5];
                Array.Copy(buf, 0, appVersionBuf, 0, buf.Length);
                bw.Write(appVersionBuf, 0, 5);

                // IRD Unique Identifier, for version 7
                if (_version == 7)
                    bw.Write(UID);

                // Compress Header
                bw.Write(HeaderLength);
                bw.Write(Header, 0, (int)HeaderLength);

                // Compress Footer
                bw.Write(FooterLength);
                bw.Write(Footer, 0, (int)FooterLength);

                // Number of regions hashed
                bw.Write(RegionCount);

                // Hashes for each region
                for (int i = 0; i < RegionCount; i++)
                    bw.Write(RegionHashes[i], 0, 16);

                // Number of files hashed
                bw.Write(FileCount);

                // Hashes for each file
                for (int i = 0; i < FileCount; i++)
                {
                    bw.Write(FileKeys[i]);
                    if (FileHashes[i] == null)
                        bw.Write(NullMD5);
                    else
                        bw.Write(FileHashes[i], 0, 16);
                }

                // Reserved fields
                bw.Write(ExtraConfig);
                bw.Write(Attachments);

                // PIC data is placed here for Version 9
                if (_version >= 9)
                    bw.Write(PIC, 0, 115);

                // Disc Authentication keys
                bw.Write(Data1Key, 0, 16);
                bw.Write(Data2Key, 0, 16);

                // PIC data is placed here prior to Version 9
                if (_version < 9)
                    bw.Write(PIC, 0, 115);

                // IRD Unique Identifier, for versions after 7
                if (_version > 7)
                    bw.Write(UID);
            }

            // Calculate the little-endian 32-bit "IEEE 802.3" CRC value of the entire stream
            stream.Position = 0;
            Crc32 crc32 = new Crc32();
            crc32.Append(stream);
            CRC = BitConverter.ToUInt32(crc32.GetCurrentHash(), 0);

            // Write final CRC value to the stream
            byte[] crc = BitConverter.GetBytes(CRC);
            stream.Write(crc, 0, 4);

            // Create the IRD file stream
            using (FileStream fs = new FileStream(irdPath, FileMode.Create, FileAccess.Write))
            {
                // Create a GZipped IRD file stream
                using (GZipStream gzStream = new GZipStream(fs, CompressionLevel.Optimal))
                {
                    // Write entire gzipped IRD stream to file
                    stream.Position = 0;
                    stream.CopyTo(gzStream);
                    stream.Close();
                }
            }
        }

        #endregion
    }
}
